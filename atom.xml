<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Raúl Ávila</title>
 <link href="http://www.raulavila.com/atom.xml" rel="self"/>
 <link href="http://www.raulavila.com/"/>
 <updated>2017-01-15T13:12:57+00:00</updated>
 <id>http://www.raulavila.com/</id>
 <author>
   <name>Raul Avila</name>
   <email/>
 </author>

 
 <entry>
   <title>You fui un mal programador</title>
   <link href="http://www.raulavila.com/2017/01/yo-fui-un-mal-programador/"/>
   <updated>2017-01-09T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2017/01/you-fui-un-mal-programador</id>
   <content type="html">&lt;p&gt;Yo fui un mal programador. Cuando terminé la carrera, como primero de promoción, pensé que ya había cumplido mi parte, y que las empresas deberían reconocer mi valía de inmediato, por lo que cuando nadie valoró ese detalle en mi CV, me cabreé. La verdad es que no me costó demasiado encontrar mi primer trabajo, el sector se encontraba en la parte alta de un ciclo, aunque ni por asomo se acercaba a la locura que estamos viviendo ahora.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Total, que una vez inicié mi andadura en una típica cárnica española, consideré que mi inteligencia me haría crecer profesionalmente sin que yo hiciera gran cosa en mi tiempo libre, aparte de trabajar de la mejor forma que podía cuando estaba en la oficina. Ocurrió que la forma de trabajar en ese primer equipo no era demasiado colaborativa y no favorecía demasiado el aprendizaje. Además, como ya comenté en &lt;a href=&quot;/2015/08/10-years/&quot;&gt;mi post de 10 años de profesional&lt;/a&gt; no elegí demasiado sabiamente las tecnologías más apropiadas para un primer puesto de trabajo. Por último, el ambiente, lleno de continuas quejas sobre lo mal que estaba nuestro sector (“hay que dejar la informática”), hizo que me desmotivara y estancara.&lt;/p&gt;

&lt;p&gt;Mi segunda empresa, la consultora más grande de España, no hizo sino hundirme más en el pozo. Aquel proyecto era tóxico, con docenas de personas sin hacer nada, cosa que justificaban debido a las no subidas de sueldo. Al menos en este caso reaccioné a tiempo.&lt;/p&gt;

&lt;p&gt;En mi tercera empresa estuve más de cinco años, y la verdad es que disfruté de casi todo mi tiempo allí. Pero se dió un pequeño problema, trabajaba prácticamente solo como desarrollador en Madrid. No había discusiones sobre decisiones técnicas, y de revisiones de código o pair programming ni hablemos. Como nunca tuve a nadie diciéndome si hacía o no bien las cosas, aunque yo intentaba hacerlas bien, como nunca me formaba ni leía, pues las hacía más mal que bien, aunque, todo sea dicho, ninguno de los proyectos en los que trabajé fue un fracaso, ya que siempre intenté trabajar duro. Así que quizás no fuera un mal trabajador, pero sí era un mal programador, de ahí el título de este post. Hoy seguramente se me caería la cara de vergüenza si viera el código que entregué durante esos años.&lt;/p&gt;

&lt;p&gt;Hace unos cuatro años todo cambió, la historia no es sencilla de contar en un simple post, pero varios factores contribuyeron a que me diera cuenta de lo mal que estaba llevando mi carrera profesional. Así que me puse las pilas: leí muchos libros, estudié muchos cursos, comencé a seguir muchísimas webs (para &lt;a href=&quot;/2015/10/estar-al-dia/&quot;&gt;estar al día&lt;/a&gt;), &lt;a href=&quot;/2016/12/aprender-ingles/&quot;&gt;estudié inglés&lt;/a&gt;…en fin, todo lo que debería haber hecho y no hice al principio de mi carrera. Quizás malgasté siete u ocho años en total, y aunque no me queje del momento en que me encuentro ahora, quien sabe cómo de diferente habría sido todo si no hubiera metido tanto la pata al principio.&lt;/p&gt;

&lt;p&gt;Si escribo este post es únicamente para que un potencial lector que se esté iniciando en este mundo tan apasionante no cometa los mismos errores que cometí yo y se convierta en un mal programador sin posibilidad de vuelta atrás. Así que, por favor, nunca nunca:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dejéis de aprender: leed libros (&lt;a href=&quot;https://jasonroell.com/2015/03/16/12-most-infuential-books-every-software-engineer-needs-to-read/&quot;&gt;aquí tenéis una buena lista para empezar&lt;/a&gt;), suscribiros a newsletters como la de &lt;a href=&quot;https://dzone.com/&quot;&gt;DZone&lt;/a&gt;, seguid a las personas adecuadadas en Twitter…&lt;/li&gt;
  &lt;li&gt;Trabajéis sin un buen mentor a vuestro lado: donde digo mentor me vale “buen programador”. Es necesario que alguien critique vuestro trabajo, es la mejor forma de aprender. Y por supuesto, nunca os toméis las críticas como algo personal&lt;/li&gt;
  &lt;li&gt;Dejéis de asistir a eventos técnicos: se aprende muchísimo, y lo mejor de todo, se conoce a gente muy interesante&lt;/li&gt;
  &lt;li&gt;Dejéis de disfrutar de vuestro trabajo: si no disfrutáis el día a día, buscad otro sitio. Nos podemos permitir ese lujo, y lo peor que nos puede ocurrir es caer en la desmotivación&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La lista podría continuar con otras cosas: escribir un blog, colaborar en proyectos Open Source…pero nada de eso me parece tan importante como los cuatro puntos que he reflejado.&lt;/p&gt;

&lt;p&gt;Y como último consejo, ¡sed humildes! Nadie está en posesión de la verdad absoluta, fundamentalmente porque tal verdad no existe, y siempre habrá ahí fuera gente que sepa mucho más que vosotros. De hecho, en este post no estoy diciendo que yo ahora sea un buen programador para nada. Es fácil decir cuando algo no es bueno, pero no es tan fácil decir cuando lo es.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mis propósitos para 2017</title>
   <link href="http://www.raulavila.com/2017/01/propositos-2017/"/>
   <updated>2017-01-01T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2017/01/propositos-2017</id>
   <content type="html">&lt;p&gt;¡Feliz 2017! Es la primera vez que escribo un post en un primero de Enero, cosa que sólo fue posible hacer en 2016 ya que este blog nació a finales de Enero de 2015 :) El motivo de encontrarme en pijama tecleando unas palabras es que, animado por la &lt;a href=&quot;http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;amp;id=f0e4a3e3ec&amp;amp;e=b93d18ec09&quot;&gt;Bonilista&lt;/a&gt; y otros blogs de tuiteros que sigo, he decidido plasmar en un post mis objetivos para este año que empieza, y que será bastante desafiante para mí, sobre todo a nivel profesional.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Así que allá vamos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hacer un buen trabajo en mi nuevo rol en &lt;a href=&quot;http://pivotal.io/&quot;&gt;Pivotal&lt;/a&gt;: inicié mi andadura en Pivotal el 1 de Febrero de 2016, y once meses después (el 3 de Enero, con el nuevo año) me uniré a un proyecto en el rol de anchor (algo así como “Team Leader”, &lt;a href=&quot;https://medium.com/built-to-adapt/the-pivotal-glossary-93b8be9de916&quot;&gt;en este artículo&lt;/a&gt; tenéis una descripción de todos los roles que existen en mi empresa). No es un ascenso en realidad, tan solo uno de los roles que se pueden desempeñar si eres Senior. Esto significa que existe la posibilidad de ser anchor en un proyecto y no serlo en el siguiente, a diferencia de la típica escalera corporativa. Pero bien es cierto que el cambio en mis tareas va a ser importante durante unos meses, sé que al principio será algo complicado, pero me encuentro bastante motivado, y me va a servir para aprender un montón.&lt;/li&gt;
  &lt;li&gt;Mejorar mi vocabulario en inglés: en este momento, el vocabulario es mi punto débil en inglés con diferencia. He reflexionado un poco y creo que mi problema es la falta de método para interiorizar nuevas palabras. Cada día escucho, leo o incluso tengo que utilizar alguna palabra nueva (con la ayuda de WordReference en este caso), pero no las registro en ningún lado, y si necesito usarlas en un período de tiempo no las recuerdo. Existe un sistema conocido como &lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki Cards&lt;/a&gt;, son tarjetas con dos caras que se pueden utilizar para repasar este tipo de cosas (no entraré en detalles aquí). Lo empecé a utilizar hace un año, pero abandoné. Pienso retomarlo de nuevo, y la medida de mi éxito en este punto será poder “jugar” a Anki en Diciembre con un porcentaje alto de aciertos. Veremos.&lt;/li&gt;
  &lt;li&gt;Llevar un registro de los libros que termine: creo que es muy útil registrar &lt;a href=&quot;http://evernote.com&quot;&gt;en algún lado&lt;/a&gt; los libros leídos, para poder mirar atrás y recapacitar sobre lo aprendido. Antiguamente con los libros en papel bastaba con ir a tu biblioteca particular, pero ahora, con el Kindle, &lt;a href=&quot;https://www.safaribooksonline.com&quot;&gt;Safari Books&lt;/a&gt;, audiolibros…es más complicado. Leo menos de lo que querría, pero me gustaría tener una métrica real para poder valorarlo a final de año. La verdad es que este objetivo debería ser fácil :).&lt;/li&gt;
  &lt;li&gt;Rodar y mejorar mis dotes de public speaking: el año pasado dí &lt;a href=&quot;https://skillsmatter.com/skillscasts/8851-lscc-meetup&quot;&gt;mi primera charla en inglés&lt;/a&gt;, un par de veces además. Estoy bastante contento con su contenido, y creo que la mejoraré y repetiré en algún evento durante 2017. Me gustaría, además, poder presentarla en español, así que la propondré en &lt;a href=&quot;/2016/11/codemotion-2016/&quot;&gt;Codemotion&lt;/a&gt;, donde creo que encaja bien (llevo varios años intentando hablar en esta gran conferencia), y quizás algún otro sarao. También tengo algunas ideas para nuevas charlas, por lo que como parte de este objetivo tengo desarrollar una nueva ponencia.&lt;/li&gt;
  &lt;li&gt;Ir al gimnasio al menos tres veces por semana: este objetivo prácticamente lo tengo cumplido por defecto, en 2016 no hubo semana que bajara de dos días en el gimnasio. Pero sé que, debido al trabajo, necesito no perder de vista esto, así que intentaré llevar un control algo más exhaustivo.&lt;/li&gt;
  &lt;li&gt;Conocer a más gente de la comunidad, tanto en Londres como en España: cada vez tengo más conocidos en el mundillo, me muevo bastante por Londres, sobre todo en eventos de la &lt;a href=&quot;https://www.meetup.com/london-software-craftsmanship/&quot;&gt;LSCC&lt;/a&gt; y la &lt;a href=&quot;https://www.meetup.com/Londonjavacommunity&quot;&gt;LJC&lt;/a&gt;, así que de tanto ver las mismas caras acabas conociendo a mucha gente. En España lo tengo algo más complicado, Twitter es muy bueno en esto, y en 2016 el &lt;a href=&quot;/2016/11/codemotion-2016/&quot;&gt;Codemotion&lt;/a&gt; fue una gran oportunidad para conocer a figuras importantes de la escena española. En este año me gustaría consolidar alguna de las relaciones iniciadas, y comenzar otras.&lt;/li&gt;
  &lt;li&gt;Escribir al menos 15 posts en el blog: no es un objetivo demasiado ambicioso, pero quiero ser realista. Estoy muy orgulloso de todo el trabajo que he realizado aquí, y me gustaría mantener un ritmo razonable, sin quemarme.&lt;/li&gt;
  &lt;li&gt;Publicar al menos 5 posts en &lt;a href=&quot;https://dev.to/&quot;&gt;The Practical Dev&lt;/a&gt;: como ya conté hace poco, decidí comenzar a escribir en inglés fuera de este blog, y la plataforma elegida fue &lt;a href=&quot;https://dev.to/&quot;&gt;The Practical Dev&lt;/a&gt;. En este año quiero incrementar mi presencia en esta web, sin ser demasiado ambicioso. En realidad, de momento me estoy dedicando a traducir artículos escritos en el blog, pero no descarto publicar algo más “exclusivo”.&lt;/li&gt;
  &lt;li&gt;Terminar al menos un curso online “end to end”: con esto quiero decir completando todas las prácticas, exámenes, o lo que sea. Veo muchos vídeos o tutoriales de forma habitual, pero con cursos completos no soy tan consistente. En 2016 conseguí completar el &lt;a href=&quot;https://www.coursera.org/learn/progfun1&quot;&gt;popular curso de Scala en Coursera &lt;/a&gt;, pero fracasé en completar la especialización, que era mi objetivo en realidad. El motivo fue que no ví un retorno de la inversión claro, dada la dificultad de las prácticas. Quizás este año finalice alguna de las otras partes de la especialización, o quizás me líe la manta a la cabeza con alguna otra cosa que considere más interesante.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creo que lo dejaré aquí, sé que será casi imposible conseguir todo lo que pretendo, pero siempre hay que apuntar alto, ¿verdad? A finales de año repasaré cómo ha ido todo, y veré si tuvo sentido escribir esto.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Aprender inglés</title>
   <link href="http://www.raulavila.com/2016/12/aprender-ingles/"/>
   <updated>2016-12-22T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2016/12/aprender-ingles</id>
   <content type="html">&lt;p&gt;Un lector me pidió hace unas semanas que escribiera un post sobre cómo aprendí inglés. Y aunque este blog es básicamente tecnológico, el conocimiento de este idioma es fundamental para desarrollar una carrera en nuestro mundillo, así que no creo que sea un tema demasiado off-topic para hablar de él.&lt;/p&gt;

&lt;h2 id=&quot;mis-precedentes&quot;&gt;Mis precedentes&lt;/h2&gt;

&lt;p&gt;Yo siempre he sido muy negado con los idiomas. Diría que es algo que compartimos el 95% (o más) de los españoles. Con la perspectiva del tiempo, está claro que todo viene del nefasto sistema educativo español, donde la asignatura de inglés consiste básicamente en estudiar la gramática y los verbos irregulares año tras año, sin hacer ningún tipo de hincapié en la conversación o el listening. Añadamos a esto que en España se doblan películas y series, y aunque en la última década esto ha mejorado gracias al DVD y TDT, la mentalidad sigue siendo parecida, y por norma general nos resulta más cómodo el doblaje que los subtítulos.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Hace algunos años comencé a darme cuenta de que mi carrera profesional estaba algo estancada, y uno de los principales motivos era mi escasa soltura con el inglés. Así que me puse manos a la obra, de una vez por todas, para conseguir un nivel razonable. Este nivel me sirvió para &lt;a href=&quot;/2015/04/trabajo-londres/&quot;&gt;dar el salto a Londres&lt;/a&gt;, donde voy para tres años, así que podría decir que conseguí lo que quería.&lt;/p&gt;

&lt;h2 id=&quot;disciplina&quot;&gt;Disciplina&lt;/h2&gt;

&lt;p&gt;Aprender un segundo idioma es extremadamente complicado, y lo más importante para conseguirlo es &lt;strong&gt;la disciplina&lt;/strong&gt;. Asignad un tiempo diario al estudio del inglés, y no os salgáis de esa rutina por nada del mundo. Quizás se pueda tolerar no hacerlo un día por semana, pero no más. Ese tiempo diario no tiene qué ser excesivo, aunque depende de vuestro objetivo de aprendizaje, pero debería estar entre un mínimo de 30 minutos y un máximo de 90. Más tiempo podría resultar contraproducente, y generar un efecto hastío demasiado pronto. Esto es así porque los resultados se consiguen con mucha lentitud, y sólo son perceptibles cuando os comparáis con vosotros mismos un año atrás.&lt;/p&gt;

&lt;h2 id=&quot;clases-one-to-one&quot;&gt;Clases one to one&lt;/h2&gt;

&lt;p&gt;Se puede aprender inglés sin gastar demasiado dinero, pero una mínima inversión es necesaria. De nuevo, depende de vuestros objetivos, pero si queréis alcanzar un nivel conversacional es imposible hacerlo sin un desemboloso razonable. Mi principal consejo aquí es que os olvidéis de las academias tradicionales, con clases por grupos donde solo una persona de diez tiene inglés como primera lengua. Buscad profesores que os den clases one to one. Si vivís en una ciudad como Madrid o Barcelona debería ser fácil &lt;a href=&quot;https://www.tusclasesparticulares.com/&quot;&gt;encontrar esta opción de forma presencial&lt;/a&gt;, pero en estos días que vivimos mi opción favorita son las clases por Skype, ya que no suponen desplazamiento para ninguna de las partes. Los precios por hora pueden variar entre 18 y 30 euros (al menos esto fue lo que pagué en su día), pero no creo que haya hecho una mejor inversión jamás. Sin ánimo de dar publicidad a nadie, yo fui alumno de dos academias online: &lt;a href=&quot;http://www.ebpai.com/&quot;&gt;EBPAI&lt;/a&gt;, y una que acabo de descubrir que ya no existe :). Mi profesora en EBPAI fue &lt;a href=&quot;https://twitter.com/monicats&quot;&gt;Mónica Stocker&lt;/a&gt;, creadora de &lt;a href=&quot;http://elblogdelingles.blogspot.com.es/&quot;&gt;El Blog Para Aprender Inglés&lt;/a&gt;, y nunca le estaré lo suficiente agradecido por la ayuda prestada, tanto con el inglés como por su particular coaching, que me ayudó a creer en mí mismo como poca gente había hecho en el pasado. Su blog es altamente recomendable, lleno de estupendos consejos para persistir en esta empresa tan complicada.&lt;/p&gt;

&lt;p&gt;El rendimiento que se puede obtener de una buena profesora durante una hora de clase es algo que nada podrá igualar, ni clases en grupo, ni horas de estudio, ni ver series o películas en VO…es el único punto que yo consideraría innegociable. Dependendiendo de vuestro presupuesto haría una o dos horas por semana.&lt;/p&gt;

&lt;h2 id=&quot;intercambios-de-idioma&quot;&gt;Intercambios de idioma&lt;/h2&gt;

&lt;p&gt;Para poder hablar con nativos eliminando el gasto de las clases particulares, tenemos la opción de hacer intercambios de idiomas. Se trata de conversaciones por Skype con personas de otros países (idealmente nativos ingleses o americanos), interesadas en aprender español, de forma que se reparte el tiempo de conversación entre uno y otro idioma.&lt;/p&gt;

&lt;p&gt;Existen varias webs que facilitan contactar con estas personas, yo utilicé fundamentalmente &lt;a href=&quot;https://www.mylanguageexchange.com/&quot;&gt;My Language Exchange&lt;/a&gt;, que tiene el pequeño problema de ser de pago. Otras alternativas pueder ser &lt;a href=&quot;http://www.speaking24.com/&quot;&gt;Speaking24&lt;/a&gt; o &lt;a href=&quot;https://sharedlingo.com/&quot;&gt;SharedLingo&lt;/a&gt;, aunque hay muchas más (en más de tres años desde que dejé de tener estos intercambios seguramente hayan salido muchas nuevas).&lt;/p&gt;

&lt;p&gt;Mi consejo aquí es que no cejéis en el empeño a la hora de encontrar un buen compañero. La gente en general es demasiado volátil, y cuesta dar con alguien que tenga el mismo interés que nosotros. Yo tuve suerte (en realidad la busqué, mandando cientos de solicitudes), y durante año y medio aproximadamente quedaba cada semana con una chica americana para hablar durante hora y media. Lo que resultó complicado a la larga fue que su nivel de español era peor que mi nivel de inglés, y ella sentía que el beneficio obtenido no estaba equilibrado, así que dejamos de hablar, aunque hemos mantenido el contacto por correo.&lt;/p&gt;

&lt;h2 id=&quot;la-gramática&quot;&gt;La gramática&lt;/h2&gt;

&lt;p&gt;Si sentís que vuestra gramática no está demasiado pulida, comprad (y estudiad, claro) el libro &lt;a href=&quot;https://www.amazon.es/English-Grammar-Answers-Interactive-eBook/dp/1107539331/ref=sr_1_1&quot;&gt;English Grammar in Use&lt;/a&gt;. Con eso debería ser suficiente.&lt;/p&gt;

&lt;h2 id=&quot;listening&quot;&gt;Listening&lt;/h2&gt;

&lt;p&gt;Llegamos al tema más complicado, el listening. Tras casi tres años viviendo en UK aún tengo problemas con esto, existen muchos y variados acentos, y en muchas ocasiones no es nada sencillo seguir con facilidad lo que otra persona está diciendo.&lt;/p&gt;

&lt;p&gt;La mejor forma de mejorar el listening es practicar, practicar y practicar, sin descanso. Cualquier momento es bueno, el camino al trabajo o la universidad, el gimnasio, momentos de ocio viendo series o películas…A nivel más “académico” os recomiendo los siguientes recursos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.engvid.com/&quot;&gt;English Videos&lt;/a&gt;: profesores de diferentes países y acentos dando clases de inglés, de gramática, vocabulario, use of english…de todo, vaya&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bbc.co.uk/learningenglish/&quot;&gt;BBC Learning English&lt;/a&gt;: página para aprender inglés de la BBC. Es inglés británico, y hay muchísimas secciones, pero mi favorita, y la que más he utilizado, es “6 minute English”. Son audios de 6 minutos donde dos personas hablan de un tema en concreto, y están muy muy bien. Podéis poneros como objetivo diario escuchar dos programas de 6 minute English varias veces, por ejemplo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.elllo.org/&quot;&gt;Elllo&lt;/a&gt;: es una web con cientos de audios muy breves (de 1 a 2 minutos es lo normal), con conversaciones informales y en varios acentos. Lo mejor, en mi opinión, es que son conversaciones muy reales, no parece en ningún momento que estén adaptando el nivel de cara al aprendizaje, como a veces si puede pasar con los audios de la BBC&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;leer&quot;&gt;Leer&lt;/h2&gt;

&lt;p&gt;Comprad un Kindle y leed en inglés. La ventaja de utilizar un libro electrónico es la comodidad de instalar un diccionario y buscar al instante palabras desconocidas, además del acceso inmediato a millones de obras de todo tipo en Amazon. No tenéis por qué leer novela, de hecho diría que este género es más complicado si vuestro nivel no es muy avanzado, pero podéis hacerlo perfectamente si es lo que más disfrutáis. La clave a la hora de leer en otro idioma es que os interese el tema, nada más.&lt;/p&gt;

&lt;h2 id=&quot;recursos-adicionales&quot;&gt;Recursos adicionales&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://es.duolingo.com/&quot;&gt;Duolingo&lt;/a&gt;: no lo he utilizado, pero todo el mundo lo recomienda encarecidamente, así que aquí lo dejo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.howjsay.com/&quot;&gt;Howjsay&lt;/a&gt;: web donde podéis introducir palabras para conocer su pronunciación. Si una palabra se pronuncia de forma diferente en inglés británico y americano te salen las dos. Muy útil&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vivir-en-otro-país&quot;&gt;Vivir en otro país&lt;/h2&gt;

&lt;p&gt;Nada puede igualar a vivir un tiempo en otro país para adquirir soltura con un idioma. El problema es que puede no ser una opción factible, pero si lo es, aunque sea por unos meses, deberíais hacerlo. Personalmente, irme a vivir a Londres es quizás la mejor decisión que haya tomado en mi vida, y conozco a muy poca gente que se arrepienta de haber dado ese paso.&lt;/p&gt;

&lt;h2 id=&quot;motivación&quot;&gt;Motivación&lt;/h2&gt;

&lt;p&gt;Si no tenéis un motivo de peso para estudiar inglés terminaréis abandonando. Así que mi último consejo es que busquéis ese motivo, y lo tengáis siempre presente en momentos de flaqueza, que los tendréis con seguridad, porque aprender inglés no es nada sencillo. Aquí dejo una lista de motivos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mejorar profesionalmente (más dinero, acceso a mejores puestos)&lt;/li&gt;
  &lt;li&gt;Viajar con toda comodidad: con español e inglés como idiomas es muy sencillo moverse por casi todo el mundo&lt;/li&gt;
  &lt;li&gt;Tener acceso a toda la información de alta calidad en inglés que existe en internet: inglés es el idioma de internet, y no encontraréis en español ni una décima parte de la información que encontraréis en inglés&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¡Mucho ánimo!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Codemotion 2016</title>
   <link href="http://www.raulavila.com/2016/11/codemotion-2016/"/>
   <updated>2016-11-21T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2016/11/codemotion-2016</id>
   <content type="html">&lt;p&gt;Mi primer &lt;a href=&quot;http://codemotion.es/&quot;&gt;Codemotion&lt;/a&gt; fue el del año 2013, cuando aún vivía en España. Coincidió con un momento de mi carrera donde buscaba desesperadamente un cambio de aires, persiguiendo trabajar en un lugar donde me sintiera verdaderamente respetado como profesional, y que desembocó en mi marcha a Londres,&lt;/p&gt;

&lt;p&gt;Me lo pasé bastante bien en esa edición, el ambiente fue genial, y me di cuenta de que en España se seguían moviendo cosas, pero mis planes no cambiaron.&lt;/p&gt;

&lt;p&gt;Estamos en 2016, y tras dos años en los que no tuve la posibilidad de bajar a Madrid para el evento, en el actual sí se dieron las circunstancias, así que, vuelo mediante, me planté en la Universidad San Pablo CEU con ganas de disfrutar las dos jornadas al máximo.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Organizar eventos es complicado, y en primer lugar me gustaría lanzar un aplauso desde este humilde blog a la organización. Juntar a un par de miles de personas durante dos días y que el asunto no desemboque en caos tiene muchísimo mérito. Una de las cosas que menos me gustaron en 2013 fue la locura para entrar en determinadas charlas, y por lo visto se ha mejorado bastante en ese aspecto. La organización de los breaks también me pareció adecuada, y la comida muy aceptable (¡opciones para veganos y celíacos incluidas!).&lt;/p&gt;

&lt;p&gt;La keynote de &lt;a href=&quot;https://twitter.com/nachocoloma&quot;&gt;Nacho Coloma&lt;/a&gt; fue increíblemente inspiradora, y una forma perfecta de dar el pistoletazo de salida. Y el cierre me transmitió un buen rollo tremendo, entiendo que mucha gente quisiera abandonar el lugar tras dos largos días, pero creo que todos los organizadores y voluntarios merecen tener un justo reconocimiento por el trabajo.&lt;/p&gt;

&lt;p&gt;El único problema notable de todo el evento fue una incidencia con el proyector en el track principal el día 2. Estuvo molestando durante todo el día, y la verdad es que los ponentes lo capearon bastante bien, yo personalmente lo habría llevado fatal.&lt;/p&gt;

&lt;h2 id=&quot;las-charlas&quot;&gt;Las charlas&lt;/h2&gt;

&lt;p&gt;Con tantos tracks en paralelo, elegir donde acudir es en ocasiones estresante. Ocurre a veces que a la misma hora tienen lugar varias charlas interesantes, y en otras a duras penas encuentras algo que realmente te llame. Es el problema de nuestro mundillo, se mueven tantas cosas, que no se puede estar a todo, y no me gusta gastar muchas energías innecesarias en tecnologías que no creo vaya a aplicar a corto / medio plazo.&lt;/p&gt;

&lt;p&gt;Además, dado el formato de la conferencia, no considero educado abandonar una charla si veo que no me interesa, esta es una de las cosas que más me gusta del formato Open Conference. Pero la verdad es que solo me ocurrió una vez esto que cuento.&lt;/p&gt;

&lt;p&gt;De todas las sesiones a las que asistí me quedo con las siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Time to grow up”, por &lt;a href=&quot;https://twitter.com/flipper83&quot;&gt;Jorge Barroso&lt;/a&gt;. El triunfador del evento, en mi opinión y la de mucha gente. Sin más apoyo que una serie de fotografías en sus slides, repasó el estado de la industria del desarrollo en España, lanzó varias críticas políticamente incorrectas, pero necesarias, como la NO necesidad de tener un colegio de informáticos, y animó a developers y empresas a ser menos capullos y buscar un entorno de trabajo más saludable.&lt;/li&gt;
  &lt;li&gt;“Aprender a distinguir el problema de la solución”, por &lt;a href=&quot;https://twitter.com/carlosble&quot;&gt;Carlos Blé&lt;/a&gt;. Brutal charla, complicada de resumir en un párrafo. Tuve la oportunidad de conocer a Carlos en persona, y puede que sea una de las mejores cosas que me lleve de todo el evento, todo amabilidad. La frase de la charla viene a ser “quizás esto que me pidas se puede resolver con una hoja Excel”. Tremendo.&lt;/li&gt;
  &lt;li&gt;“Microbenchmarking con JMH”, por &lt;a href=&quot;https://twitter.com/jerolba&quot;&gt;Jerónimo López&lt;/a&gt;. Fue muy gracioso escuchar en la charla como la principal queja de Java durante 15 años ha sido su bajo rendimiento pero no fue hasta 2009 que se empezaron a poner esfuerzos en publicar utilidades para medirlo. El que se está convirtiendo en estándar, JMH, tiene tan solo 3 años, y la charla de Jero fue una introducción perfecta para no iniciados.&lt;/li&gt;
  &lt;li&gt;“Microservicios, en qué lio me he metido”, por el equipo de &lt;a href=&quot;https://www.packlink.es&quot;&gt;Packlink&lt;/a&gt;. Contaron como esta arquitectura les ayudó notablemente a escalar su plataforma en muy poco tiempo. La principal conclusión vino a ser ésta, que aunque los microservicios tengan bastantes inconvenientes, los beneficios los compensan de sobra.&lt;/li&gt;
  &lt;li&gt;“Menos agilismo y más agilidad”, por &lt;a href=&quot;https://twitter.com/dafergon&quot;&gt;David Fernández&lt;/a&gt;. Este tema está muy de moda, y yo he sido bastante crítico con ciertos aspectos. Nada de lo contado me resultó novedoso, pero sí totalmente necesario, y su mención a la dificultad para tener una carrera técnica en España sin gestionar personas me ganó :) Tan solo criticar ligeramente que no incidiera más en la importancia de prácticas como el testing, la calidad software, o en otros niveles, el &lt;a href=&quot;/2016/08/pair-programming/&quot;&gt;pair programming&lt;/a&gt; o el &lt;a href=&quot;/2016/01/aprendiendo-TDD/&quot;&gt;TDD&lt;/a&gt; para conseguir una verdadera transformación ágil.&lt;/li&gt;
  &lt;li&gt;“8 formas de mejorar tu vida gracias a los logs”, por el equipo de &lt;a href=&quot;https://www.logtrust.com/en/&quot;&gt;LogTrust&lt;/a&gt;. Me reconfortó mucho enterarme de que hay una empresa española plantando cara a gigantes como LogStash o Splunk, y charlas como éstas son realmente necesarias para mentalizar a la comunidad de desarrolladores de la importancia de utilizar buenos mensajes de logs, y de las consecuencias de no acertar con el formato, etc.&lt;/li&gt;
  &lt;li&gt;“Testing on the toilet” por &lt;a href=&quot;https://twitter.com/AlfredoCasado&quot;&gt;Alfredo Casado&lt;/a&gt; y &lt;a href=&quot;https://twitter.com/Laura_Morillo&quot;&gt;Laura Morillo&lt;/a&gt;: repaso a diferentes malas prácticas en la escritura de tests, que me enganchó por la simpatía de los ponentes. En ocasiones, aunque una charla no me descubra nada nuevo, si el ponente (o los ponentes) transmiten pasión me basta y me sobra.&lt;/li&gt;
  &lt;li&gt;“Typescript, un lenguaje aburrido para programadores torpes y tristes”, de &lt;a href=&quot;https://twitter.com/micael_gallego&quot;&gt;Micael Gallego&lt;/a&gt; (esta charla la vi a posteriori, todo sea dicho). Aunque Javascript no es un leguaje que utilice actualmente, en esta charla, y con mucho humor, se introduce Typescript como alternativa para trabajar con Javascript pero añadiendo la seguridad del tipado estático que nos ofrece Java (brutal cuando dice que no renombra variables porque la da miedo :D). &lt;a href=&quot;https://www.youtube.com/watch?v=32cPEcX3Qa0&amp;amp;t=2344s&quot;&gt;Aquí tenéis la sesión&lt;/a&gt;, que me parece una buena forma de iniciarse en Typescript en menos de una hora, si estáis interesados&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nota: Docker estuvo muy presente, y en más de una sesión se comentó la importancia de aislar tareas en nuestros entornos de integración continua utilizando esta herramienta. Ya se lo comenté en persona a uno de los speakers, pero lo vuelvo a reflejar aquí, si os veis en esa necesidad os recomiendo que le echéis un vistazo a &lt;a href=&quot;/2016/05/concourse-1/&quot;&gt;Concourse&lt;/a&gt; (¿quizás sea una buena propuesta de charla para el próximo año? :)).&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;El balance fue increíblemente positivo, alegra saber que nuestra profesión, quizás la mejor del mundo, está progresando adecuadamente en un país donde hasta hace nada todo eran quejas y lamentos de lo mal que estaba la informática, y donde empresas como &lt;a href=&quot;http://www.codesai.com/&quot;&gt;Codesai&lt;/a&gt;, &lt;a href=&quot;https://www.8kdata.com/es/&quot;&gt;8kData&lt;/a&gt;, &lt;a href=&quot;https://www.logtrust.com/en/&quot;&gt;LogTrust&lt;/a&gt;, &lt;a href=&quot;https://www.packlink.es&quot;&gt;Packlink&lt;/a&gt;…están liderando un cambio verdadero y no de fachada.&lt;/p&gt;

&lt;p&gt;Me vuelvo a casa con una sonrisa de oreja a oreja, y muchas ganas de repetir, ¡hasta el año que viene!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://2016.codemotion.es/agenda.html&quot;&gt;Aquí os dejo la agenda de la conferencia&lt;/a&gt;, que además contiene links a las charlas que fueron grabadas)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Perdón por la ausencia</title>
   <link href="http://www.raulavila.com/2016/11/perdon-por-la-ausencia/"/>
   <updated>2016-11-12T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2016/11/perdon-por-la-ausencia</id>
   <content type="html">&lt;p&gt;El último mes y medio ha sido una auténtica locura, y no he podido dedicar al blog todo el tiempo que sería necesario para publicar artículos de mediana calidad. Mi intención es estar en la brecha de nuevo, al menos hasta el obligado parón navideño.&lt;/p&gt;

&lt;p&gt;Voy a repasar a modo de bitácora las diferentes cosas que me he traído entre manos últimamente, no como excusa, sino para dejar plasmadas las diferentes cosas que he aprendido o hecho.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;mis-cinco-mantras-la-presentación&quot;&gt;Mis cinco mantras: la presentación&lt;/h2&gt;

&lt;p&gt;Los que me seguís sabéis que tengo &lt;a href=&quot;/2016/07/mis-5-mantras/&quot;&gt;5 mantras para escribir software&lt;/a&gt;. Cuando escribí el post hace unos meses pensé que el tema daba para una presentación pública, así que me lié la manta a la cabeza, la propuse a la &lt;a href=&quot;http://www.meetup.com/london-software-craftsmanship/?chapter_analytics_code=UA-19049790-1&quot;&gt;London Software Craftmanship Community&lt;/a&gt;, y me la aceptaron para una de sus sesiones mensuales. Muchas gracias desde aquí a esta increíble comunidad por darme la oportunidad de estrenarme públicamente con una charla en condiciones (anteriormente había dado algún “lightning talk”).&lt;/p&gt;

&lt;p&gt;La verdad es que hubo ciertos momentos de nerviosismo mientras daba forma a las diapositivas (&lt;a href=&quot;http://es.slideshare.net/Ralvila/my-five-mantras-to-write-better-software&quot;&gt;aquí las tenéis&lt;/a&gt;), hablar en público ya es complicado de por sí, y si añades hacerlo en un idioma que no es el tuyo, los motivos de preocupación se multiplican.&lt;/p&gt;

&lt;p&gt;Pero en esta vida, como diría mi amado/odiado &lt;a href=&quot;https://twitter.com/jsonmez&quot;&gt;John Somnez&lt;/a&gt;, si quieres crecer hay que hacer cosas que te hagan sentir incómodo, así que seguí adelante sin miramientos. Trabajar en Pivotal fue una gran ventaja durante la preparación, mi empresa favorece en gran medida este tipo de iniciativas, y nos deja hacer ensayos delante de toda la oficina a la hora de comer, además de tener compañeros dispuestos a dar feedback. Muchas gracias también a Pivotal por el apoyo.&lt;/p&gt;

&lt;p&gt;La presentación diría que fue razonablemente bien, pero aprendí varias lecciones importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No importa cuanto prepares todo con antelación, siempre habrá imprevistos de última hora. El dia de la presentación me enteré de que me iban a grabar (!!), cosa que me puso bastante nervioso. No es lo mismo dar una charla para un grupo de personas, que darla además para una cámara que dejará registrado lo que hagas para siempre. En cualquier caso, creo que capeé el tema razonablemente bien&lt;/li&gt;
  &lt;li&gt;Si el evento tiene varias charlas, y te dan a elegir, intenta ser primero. Normalmente, los tiempos suelen ser bastante ajustados para terminar el evento, y como me tocó ser último (porque el otro speaker era bastante experimentado y saltó a elegir el primer turno), a falta de diez minutos para terminar mi presentación, y aunque iba bien de tiempo, los organizadores empezaron a hacerme gestos que me pusieron algo nervioso. Esto se puede ver en el vídeo que grabaron, en la última parte meto muchos más gambazos que en la primera&lt;/li&gt;
  &lt;li&gt;Nunca confíes en la vista del presentador de Powerpoint / Keynote. No sabes de antemano como será la distribución de la sala, y en mi caso, la mesa me quedaba bastante lejos de donde yo debía estar de pie. Por suerte, las notas del presentador son algo a lo que no presto mucha atención, pero si pensáis confiar en ellas, mejor no lo hagáis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo de ser grabado a posteriori ha sido incluso beneficioso, no me veo ni de lejos tan lamentable como yo pensaba, y ver mi propia presentación me ha servido para tomar notas de los puntos a mejorar. &lt;a href=&quot;https://skillsmatter.com/skillscasts/8851-lscc-meetup&quot;&gt;Aquí dejo el vídeo&lt;/a&gt;, por si os interesa ver a quien escribe :)&lt;/p&gt;

&lt;h2 id=&quot;uncodebar&quot;&gt;Uncodebar&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codebar.io/&quot;&gt;Codebar&lt;/a&gt; es un meetup londinense cuyo principal objetivo es ayudar a nuevos programadores a introducirse en el mundillo y aprender. Funciona mucho con el modelo de mentorado, y cualquier persona con experiencia puede unirse a ellos para colaborar. Muchos de los actuales mentores empezaron como mentorados hace un par de años, y tengo la impresión, sin ser un miembro activo del grupo, de que funcionan bastante bien.&lt;/p&gt;

&lt;p&gt;Uncodebar es una Open Conference que organizan cada año (este creo que ha sido el segundo). Mi empresa ofrecía las oficinas para alojarla, así que me ofrecí como voluntario. Mis principales tareas tuvieron lugar el propio día de la conferencia, ya que anteriormente los organizadores se encargaron de prácticamente todo.&lt;/p&gt;

&lt;p&gt;Si no conocéis el formato Open Conference, la idea es que no hay agenda cerrada, y los propios asistentes proponen charlas el mismo día de la conferencia. Este formato, que puede parecer un poco loco, tiene un par de ventajas importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La gente se presenta al evento con muchísimas ganas de disfrutar y pasar un buen día, ya que nadie madruga un sábado para ir a algo de mala gana, ¡y más cuando no hay agenda! Así que el ambiente es fantástico&lt;/li&gt;
  &lt;li&gt;El formato de muchas sesiones es de discusión o workshop más que de presentación pura, por lo que siempre surgen conversaciones interesantes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalmente, aproveché para repetir mi presentación, con bastante buena acogida, ya que el público era generalmente principiante / nivel medio. También aprendí que organizar eventos conlleva un trabajo bastante importante, pequeñas cosas que damos por sentadas cuando llegamos al lugar de la conferencia llevan horas de preparación detrás. El mismo día de la conferencia me encargué con otra persona de preparar el cuadrante de las charlas en una pared, y caray, nos llevó su buena hora para que quedara aceptable. Mi aplauso desde aquí a todas las personas que sacrifican horas de su vida para organizar este tipo de tinglados&lt;/p&gt;

&lt;h2 id=&quot;global-day-of-code-retreat&quot;&gt;Global Day of Code Retreat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/2015/11/code-retreat-2015/&quot;&gt;Ya estuve aquí el año pasado&lt;/a&gt;, y me gustó tanto la experiencia que repetí. ¡Pero es que este año ha sido incluso mejor! El evento tuvo lugar en un par de oficinas de Londres, y yo me decidí por ir a la de &lt;a href=&quot;https://codurance.com/&quot;&gt;Codurance&lt;/a&gt;, la empresa de &lt;a href=&quot;https://twitter.com/sandromancuso&quot;&gt;Sandro Mancuso&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El formato del evento es exactamente el mismo cada año, así que si queréis conocer más detalles, &lt;a href=&quot;/2015/11/code-retreat-2015/&quot;&gt;hacedlo en mi post antiguo&lt;/a&gt;. Si algo me gustó de este año es que, al tener mucha más experiencia en pair programming y TDD, estuve en posición de enseñar muchas cosas a varias personas que venían con la idea de introducirse en estas prácticas. Y creedme, es muy satisfactorio escuchar palabras de agradecimiento después de una sesión de pair programming.&lt;/p&gt;

&lt;p&gt;Yo también aprendí varias cosas, es curioso como diferentes programadores afrontan el mismo problema desde distintos puntos de vista. También tuve oportunidad de dar mis primeros pasos con Ruby (lenguaje que, todo hay que decirlo, no me llama sobremanera), refrescar Groovy, Scala…en fin, una jornada muy disfrutable.&lt;/p&gt;

&lt;p&gt;Por último añadir que había bastantes españoles en el evento, ¡lo cual demuestra que somos un país de personas muy inquietas!&lt;/p&gt;

&lt;h2 id=&quot;the-practical-dev&quot;&gt;The Practical Dev&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.to/&quot;&gt;The Practical Dev&lt;/a&gt; es una web colaborativa donde cualquiera puede escribir posts relacionados con el desarrollo software. Cuando empecé con mi blog (¡hace casi dos años ya!) tuve muchas dudas sobre si escribir en español o en inglés, pero me decanté por el español porque me resulta más cómodo y rápido, y porque me gustaría ayudar a gente con peores conocimientos de inglés, ya que buenos blogs en inglés hay miles.&lt;/p&gt;

&lt;p&gt;Sin embargo siempre me picó pensar que determinados posts publicados eran de suficiente calidad para tener un buen alcance si los hubiera escrito en inglés. Llegué incluso a plantearme combinar los dos idiomas en el blog, pero eso le habría dado poca consistencia. Así que recientemente me vino a la cabeza la idea de traducir estos posts de los que me siento más orgulloso y publicarlos en medios como &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt; o &lt;a href=&quot;https://dev.to/&quot;&gt;The Practical Dev&lt;/a&gt;, decidiéndome finalmente por este último al estar más centrado a una comunidad muy específica (los desarrolladores).&lt;/p&gt;

&lt;p&gt;Mi primer post publicado es &lt;a href=&quot;https://dev.to/raulavila/my-experience-with-pair-programming&quot;&gt;My Experience with Pair Programming&lt;/a&gt;, y es una traducción &lt;a href=&quot;/2016/08/pair-programming/&quot;&gt;del que escribí aquí&lt;/a&gt;. Lo bueno de estas plataformas es que la audiencia la tienes ganada de antemano, y mi post tuvo 200 interacciones en total en Twitter, lo cual está bien para ser el primero, así que seguiré publicando en el futuro.&lt;/p&gt;

&lt;p&gt;Las próximas semanas se presentan entretenidas, viajaré al &lt;a href=&quot;https://2016.codemotion.es/&quot;&gt;Codemotion&lt;/a&gt; en Madrid, a finales de Noviembre tendrá lugar la &lt;a href=&quot;https://sites.google.com/site/ljcopenconference/&quot;&gt;LJC Open Conference&lt;/a&gt;, y con eso me parece que daré por cerrado mi año, ¡porque vaya otoño me estoy pegando! :) Y repito, espero escribir algo más, aunque sean recapitulaciones de eventos.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Extract till you drop</title>
   <link href="http://www.raulavila.com/2016/09/extract-till-you-drop/"/>
   <updated>2016-09-25T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2016/09/extract-till-you-drop</id>
   <content type="html">&lt;p&gt;“Extract till you drop” es otro de &lt;a href=&quot;/2016/07/mis-5-mantras/&quot;&gt;mis cinco mantras&lt;/a&gt;, y quizás el que más presente tengo cuando estoy escribiendo código, hasta el punto de que más de un compañero ha hecho coñas con mi obsesión por extraer y extraer.&lt;/p&gt;

&lt;p&gt;Hace unos meses tuve una discusión amigable, a la vez que acalorada, con un desarrollador del cliente. Él no era excesivamente partidario de extraer tanto como lo hago yo, y su argumento era que es mejor tener todo en el mismo sitio en lugar de tener que estar navegando entre funciones y clases para encontrar algo. Creo que no conseguí convencerle del todo de los beneficios de la extracción, pero bien es verdad que le hice recapacitar un poco al menos, y cuando terminó nuestro proyecto me prometió enviarme una botella de &lt;a href=&quot;https://es.wikipedia.org/wiki/Albari%C3%B1o&quot;&gt;mi vino favorito&lt;/a&gt; si con el tiempo acababa descubriendo que mi punto de vista era mejor.&lt;/p&gt;

&lt;p&gt;Cuento esta historia a modo de curiosidad, y para que veáis que predico con el ejemplo :). Empecemos con una descripción de lo que significa extraer, a qué niveles podemos hacerlo, y cómo.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;En pocas palabras, extraer no es más que crear una nueva unidad de código independiente a partir de un bloque de código más monolítico. Se habla mucho hoy en día de “monolitos vs. microservicios”, y personalmente creo que esta discusión se lleva demasiadas veces al nivel de arquitectura y pocas veces al nivel de codificación. Personalmente, creo que un monolítico de código es tan peligroso, o incluso más, que una aplicación monolítica, ya que daña extraordinariamente la mantenibilidad de nuestras aplicaciones.&lt;/p&gt;

&lt;p&gt;Prácticamente todos los niveles de extracción pueden llevarse a cabo mediante las herramientas de desarrollo que utilizamos a diario (aka &lt;a href=&quot;/2015/01/entornos-integrados-desarrollo/&quot;&gt;IDEs&lt;/a&gt;). Por lo que, si estas funcionalidades no os son conocidas, echadle un vistazo tras terminar de leer este post.&lt;/p&gt;

&lt;h3 id=&quot;extraer-variables&quot;&gt;Extraer variables&lt;/h3&gt;

&lt;p&gt;Es el nivel más básico de extracción, y no es más que crear variables locales conteniendo el resultado de una expresión concreta en lugar de embeber dicha expresión entre los parámetros de la llamada a un método, por ejemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Paco&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pepe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Luis&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Barcelona&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En el ejemplo tenemos una lista de personas creada en algún punto de nuestro código, y en algún otro punto invocamos a un método &lt;code class=&quot;highlighter-rouge&quot;&gt;printNames&lt;/code&gt; que suponemos imprimirá en algún sitio los nombres de las personas de la lista que recibe por parámetro (detalle que, sinceramente, en este momento carece de relevancia). Por algún motivo queremos filtrar nuestra lista e imprimir únicamente los nombres de aquellas que viven en Madrid, así que utilizando una expresión lambda hacemos ese filtro. Se trata de una expresión relativamente sencilla, pero que a mi parecer complica bastante la lectura del código. Mi propuesta es hacer esto, mediante la función “extraer variable”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesOfPeopleInMadrid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesOfPeopleInMadrid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Podréis argumentar que estamos creando una variable que solo se utiliza una vez, y por tanto la primera versión sería válida. Bien, mi respuesta a esto es que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cuando leemos la línea con la invocación a &lt;code class=&quot;highlighter-rouge&quot;&gt;printNames&lt;/code&gt; no necesitamos tener que leer también la forma en que hemos generado dicha lista de nombres, cosa que es necesario hacer en la primera versión&lt;/li&gt;
  &lt;li&gt;Si la expresión lambda continúa creciendo (por ejemplo, si queremos poner el nombre en mayúsculas, filtrar por otra cosa, generalizar el filtro…), cada vez será más y más complicado leer un bloque de código que debería ser bastante sencillo, al no ser más que ¡una invocación a un método de un sólo paramétro!&lt;/li&gt;
  &lt;li&gt;Si hacemos algo así dejamos la puerta abierta a escribir código siguiendo este estilo en otras expresiones algo más complejas, por lo que elevamos el riesgo de terminar encontrando en nuestro código expresiones como la que sigue:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Standard&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En este caso, una vez haya pasado un tiempo razonable desde que escribiéramos este código, si tenemos que volver a él necesitaremos utilizar mucha mayor capacidad cognitiva para comprender lo que ocurre que si vemos algo así:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesOfPeopleUppercased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ni siquiera hace faltar retroceder al punto en el que declaramos las variables si no interesa, la expresión habla por si misma.&lt;/p&gt;

&lt;p&gt;He mencionado el termino “capacidad cognitiva”. Quiero aprovechar este punto para haceros una pregunta. ¿Cuántas veces durante una conversación se os ha pasado algo por la cabeza que queréis decir, pero por no interrumpir os habéis esperado, y cuando habéis visto el momento de hablar os habéis olvidado de ello? A mí esto me ha pasado muchas veces durante mi vida. La capacidad del cerebro para manejar diferentes piezas de información al mismo tiempo es limitada, y cuando creamos una expresión compleja como la que acabo de plasmar aquí, forzamos a utilizar más capacidad cognitiva de la que es estrictamente necesaria.&lt;/p&gt;

&lt;p&gt;En todos los ejemplos de extraer a variables he utilizado el ejemplo de una expresión lambda, ya que se trata de un tipo de expresión que puede resultar bastante compleja. Pero, en general, yo aplico esta regla a expresiones más sencillas, como puedan ser invocaciones a métodos, y así:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namesDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchNamesForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatsDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFormatForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;suelo reemplazarlo por esto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesForCity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchNamesForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatsDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFormatForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namesForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quizás no siempre se obtiene un gran beneficio, ya que la primera expresión es bastante sencilla de leer. De nuevo reitero que el problema de no extraer por norma, es que damos lugar a seguir el patrón de embeber las expresiones, por lo que encontrar cosas como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;printNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namesDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchNamesForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatsDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFormatForCity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;será mucho más habitual. Por otro lado, tenemos un beneficio añadido, y es que al extraer en variables, la depuración es mucho más sencilla. En efecto, bastará con ubicar un punto de ruptura en la línea que contiene la invocación a &lt;code class=&quot;highlighter-rouge&quot;&gt;printNames&lt;/code&gt; para poder conocer de inmediato los valores de todos sus parámetros.&lt;/p&gt;

&lt;h3 id=&quot;extraer-funciones&quot;&gt;Extraer funciones&lt;/h3&gt;

&lt;p&gt;Es el nivel más importante de extracción a mi parecer. Repito aquí las dos “reglas de las funciones” según Uncle Bob:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Functions should be small&lt;/li&gt;
    &lt;li&gt;They should be smaller than that&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Las funciones deberían &lt;a href=&quot;/2016/09/haz-una-sola-cosa/&quot;&gt;hacer una sola cosa&lt;/a&gt;, y la manera más sencilla de conseguirlo es extraer, una y otra vez, hasta que no sea posible extraer más.&lt;/p&gt;

&lt;p&gt;De nuevo, tenemos una herramienta perfecta en nuestros IDEs para hacer esto, llamada “extraer función”, que realiza este cometido a la perfección.&lt;/p&gt;

&lt;p&gt;El ejemplo de código que viene a continuación fue desarrollado por mí mismo hace unos tres años para un proceso de selección. Se trataba de implementar el juego del ahorcado en una aplicación de Spring MVC, y en su día me pareció que la solución era bastante correcta y legible. Pongo aquí un extracto del método de la clase &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; que procesaba una apuesta determinada (es decir, intentar acertar una letra):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@CookieValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hangmanGameId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNEXPECTED_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFLICT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONCURRENT_GAMES_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCharacter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INCORRECT_PLAY_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGameOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;gameRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;CookieUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GAME_ID_COOKIE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Vemos como un solo método hace un montón de cosas, y comprender la lógica en su totalidad puede llevar un tiempo. De esta forma, si alguien diferente a nosotros tiene que modificar el código, para, por ejemplo, añadir una acción adicional al finalizar el juego, antes deberá encontrar el punto en el que tal proceso se está realizando, y ser cuidadoso para no alterar otro tipo de comportamientos.&lt;/p&gt;

&lt;p&gt;Me he liado la manta a la cabeza, y aplicando mi mantra “extract till you drop”, he generado una nueva versión del código, que hace &lt;strong&gt;exactamente lo mismo&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@CookieValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hangmanGameId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetchGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verifyGameConsistency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;playBet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verifyEndState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GameNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verifyGameConsistency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameIsBeingPlayedConcurrently&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GameIsPlayedConcurrentlyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gameIsBeingPlayedConcurrently&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playBet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GameUserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;characterPlayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameUserView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCharacter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characterPlayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidBetPlayedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verifyEndState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cantContinuePlaying&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cleanUpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cantContinuePlaying&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGameOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanUpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;gameRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CookieUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GAME_ID_COOKIE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gameNotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNEXPECTED_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameIsPlayedConcurrentlyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFLICT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gamePlayedConcurrently&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONCURRENT_GAMES_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidBetPlayedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidBetPlayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INCORRECT_PLAY_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;De acuerdo, ahora tenemos un número mayor de líneas de código. ¿Y qué? Las responsabilidades están perfectamente encapsuladas en pequeñas funciones que realizan una sola cosa, de forma que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El “happy path”, donde no se da ningún error, es muy claro en el método principal&lt;/li&gt;
  &lt;li&gt;Vemos que el proceso de apuesta se divide en cuatro pequeños pasos: extraer la instancia de &lt;code class=&quot;highlighter-rouge&quot;&gt;Game&lt;/code&gt; del repositorio, verificar su estado / consistencia, hacer la apuesta, y verificar que el juego no ha terminado. Por último se devuelve en el cuerpo de la respuesta la vista actual del juego al usuario&lt;/li&gt;
  &lt;li&gt;Las expresiones booleanas compuestas están contenidas en métodos que describen de forma precisa el significado de cada expresión, por lo que no es necesario intentar entenderlas cada vez&lt;/li&gt;
  &lt;li&gt;El nivel de indentación se reduce drásticamente, y las expresiones if / else han desaparecido. En general, cuando encontramos que indentamos más de un nivel, deberemos plantearnos la necesidad de extraer comportamientos&lt;/li&gt;
  &lt;li&gt;Los casos de error están gestionados en funciones individuales anotadas con &lt;code class=&quot;highlighter-rouge&quot;&gt;@ErrorHandler&lt;/code&gt;. Para conseguir esto hemos tenido que añadir tres nuevas clases de tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; a nuestro código, pero este cambio no hace otra cosa que resaltar los puntos donde se están produciendo estas situaciones “excepcionales”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por tanto, y siguiendo con la propuesta de cambio mencionada más arriba, si queremos añadir una acción adicional al finalizar, ¿qué haríamos? En efecto, navegar en nuestras funciones: &lt;code class=&quot;highlighter-rouge&quot;&gt;playGame&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;verifyEndState&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cleanUpGame&lt;/code&gt;. Si utilizamos buenos nombres el proceso debería ser bastante directo, y no tendremos necesidad de comprender más lógica que la que es necesario modificar.&lt;/p&gt;

&lt;p&gt;Los nombres son muy importantes en este punto para evitar el efecto de “el código que busco está siempre en otro lugar”. Si utilizamos buenos nombres el código estará en el lugar que le corresponde, ni más ni menos. Una buena metáfora podría ser el típico cajón donde guardamos decenas de utensilios inservibles “por si acaso”, y que cuando finalmente necesitamos nos lleva una vida encontrar. Si en lugar de tenerlos todos en el mismo cajón tuviéramos pequeñas cajitas con etiquetas (cables, enchufes, botones, chinchetas…) su localización sería mucho más sencilla.&lt;/p&gt;

&lt;p&gt;Adicionalmente, si no extraemos de esta forma, caeremos en la trampa de añadir líneas de código al mismo método cuando un nuevo requisito es demandado, y puesto que no pasa nada por no extraer, nuestro método crecerá sin control hasta convertirse en algo inmanejable (&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_ball_of_mud&quot;&gt;big ball of mud&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Por último, una importante ventaja de esta estrategia de diseño de funciones es la facilidad para llevar a cabo benchmarking o medición del rendimiento de un método determinado. Así, si fuera necesario calcular el tiempo que lleva limpiar el estado del juego al finalizar sólo tendríamos que añadir las anotaciones necesarias al método &lt;code class=&quot;highlighter-rouge&quot;&gt;cleanUpGame&lt;/code&gt; (en el ejemplo utilizo anotaciones del framework &lt;a href=&quot;http://tutorials.jenkov.com/java-performance/jmh.html&quot;&gt;JMH&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Benchmark&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanUpGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gameRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CookieUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GAME_ID_COOKIE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;extraer-clases&quot;&gt;Extraer clases&lt;/h3&gt;

&lt;p&gt;Es muy habitual encontrarse con funciones largas, de más de 100 líneas, donde se llevan a cabo todo tipo de acciones de lo más heterogéneo, como parsear parámetros, validarlos, procesarlos, enviarlos a algún sitio, y además manejar todos los escenarios de error posibles. Bien, dichas funciones son más bien clases camufladas, y, como desarrolladores, deberemos pensar siempre en la mejor forma de aislar responsabilidades dentro de clases bien estructuradas en lugar de dar vida a métodos monstruosos.&lt;/p&gt;

&lt;p&gt;He mencionado anteriormente como extraer funciones es una actividad de diseño. Entre otras cosas lo es porque al extraer y extraer, surgen nuevas responsabilidades que piden a gritos ser encapsuladas dentro de una clase. En el ejemplo del ahorcado, está muy claro que sería conveniente mover todos los métodos de gestión de errores a una clase con esa única responsabilidad, por ejemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ControllerAdvice&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gameNotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNEXPECTED_SERVER_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameIsPlayedConcurrentlyException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONFLICT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gamePlayedConcurrently&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONCURRENT_GAMES_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidBetPlayedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidBetPlayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INCORRECT_PLAY_ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y también sería conveniente encapsular la lógica de gestión de juego fuera de la clase controladora, pero eso lo dejo como ejercicio :)&lt;/p&gt;

&lt;h3 id=&quot;extraer-paquetes&quot;&gt;Extraer paquetes&lt;/h3&gt;

&lt;p&gt;Por último, tenemos que prestar atención al tamaño de nuestros &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;namespaces&lt;/code&gt;, que deben estar bien cohesionados, y enfocados en hacer “una sola cosa”. No me extenderé más en esto, porque ya lo mencioné en &lt;a href=&quot;/2016/09/haz-una-sola-cosa/&quot;&gt;el post anterior&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusión-empatía&quot;&gt;Conclusión: empatía&lt;/h3&gt;

&lt;p&gt;Leí hace poco que &lt;a href=&quot;https://es.wikipedia.org/wiki/Kent_Beck&quot;&gt;Kent Beck&lt;/a&gt;, a la pregunta de “¿Cuál es la cualidad más importante del Software?” respondió “Empatía”. Seguir este mantra es la forma más fácil de alcanzar esa empatía, porque nos obligará a pensar permanentemente en el programador que viene detrás de nosotros y en como facilitarle la lectura del código.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Haz una sola cosa</title>
   <link href="http://www.raulavila.com/2016/09/haz-una-sola-cosa/"/>
   <updated>2016-09-19T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2016/09/haz-una-sola-cosa</id>
   <content type="html">&lt;p&gt;Ya sabéis que tengo &lt;a href=&quot;/2016/07/mis-5-mantras/&quot;&gt;5 mantras para escribir un mejor software&lt;/a&gt; (aunque es posible que esta cifra aumente con el tiempo :)). En este post profundizaré un poco en el segundo “Do one thing, do it well, and do it only”.&lt;/p&gt;

&lt;p&gt;Diría que este principio no aplica solamente al software. La historia está llena de fracasos en productos desarrollados para hacer más de una cosa, pero ninguna de ella demasiado bien. En la mayoría de casos, además, consideramos tales inventos como auténticos engendros, como el &lt;a href=&quot;http://www.hola.com/actualidad/2013073166071/panther-coche-anfibio/&quot;&gt;coche anfibio&lt;/a&gt;, la &lt;a href=&quot;https://www.amazon.com/String-Bass-Double-Neck-Guitar/dp/B001F1UFL2&quot;&gt;guitarra / bajo&lt;/a&gt;, o la &lt;a href=&quot;https://www.amazon.es/Wenger-19201-Navaja-suiza/dp/B000R0JDSI&quot;&gt;super-navaja de Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Si todos nos reímos cuando vemos estas cosas, ¿por qué no nos sorprendemos cuando desarrollamos una clase que realiza mil y una tareas sin ningún tipo de orden ni concierto? Por ejemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BankUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PersonDetails&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPersonDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stirng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No sigo, ya sabéis a lo que me refiero. Es para evitar cosas como ésta que siempre tengo presente el mantra mencionado más arriba, que no es otra cosa que el Single Responsibility Principle (SRP) o &lt;a href=&quot;https://es.wikipedia.org/wiki/Principio_de_responsabilidad_%C3%BAnica&quot;&gt;Principio de Responsabilidad Única&lt;/a&gt;. Este principio viene a decir (no es la primera vez que lo cito en este blog) que “las únidades de código deben tener sólo una razón para el cambio”, o también “las mejores funciones o módulos son aquellos que tienen una única responsabilidad”. Tras leer esto es posible que nos venga a la cabeza una pregunta…&lt;/p&gt;

&lt;h2 id=&quot;qué-es-una-responsabilidad&quot;&gt;¿Qué es una responsabilidad?&lt;/h2&gt;

&lt;p&gt;Lo de hacer una sola cosa está muy bien, pero en la práctica esto no es tan sencillo. Vamos a empezar con el mínimo nivel en qué podemos definir responsabilidades, las funciones.&lt;/p&gt;

&lt;p&gt;Una función tiene una única responsabilidad si:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Su nombre es perfectamente descriptivo de lo que hace&lt;/li&gt;
  &lt;li&gt;Dicho nombre no tiene conjunciones (And / Or / But), por lo que métodos como &lt;code class=&quot;highlighter-rouge&quot;&gt;washAndClean()&lt;/code&gt; no cumplirían el SRP&lt;/li&gt;
  &lt;li&gt;Preferiblemente no tiene efectos secundarios, y con esto quiero decir que no hará nada que no esperemos dado el nombre de la función y leyendo sus argumentos y tipo de retorno&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos a continuación ejemplos de funciones que no cumplen el SRP:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namesById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auditService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En efecto, esta función &lt;code class=&quot;highlighter-rouge&quot;&gt;getName&lt;/code&gt; está auditando sus accesos, lo cual puede resultar un poco confuso para los usuarios de nuestro código.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseAndSave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messageStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;messageDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En este ejemplo es evidente que estamos llevando a cabo dos tareas bien diferentes, pero, ¿por qué deberíamos rediseñar esta función? ¿Qué define una responsabilidad? Para entender bien esto, pasemos al siguiente nivel de abstracción, las clases.&lt;/p&gt;

&lt;h2 id=&quot;clases-y-responsabilidades&quot;&gt;Clases y responsabilidades&lt;/h2&gt;

&lt;p&gt;Una clase puede ser definida de muchas maneras, pero nadie se llevará las manos a la cabeza si la defino aquí como “familia de funciones con un objetivo bien definido”. Este objetivo no es otra cosa que la responsabilidad de la clase, y dicha responsabilidad no es más que la implementación de una serie de soluciones a las necesidades de un &lt;strong&gt;actor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un actor es la personificación de un rol determinado que interactúa con nuestro sistema, y que es la audiencia de una responsabilidad determinada. Esta definición es muy flexible, y puede abarcar desde:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El usuario final de una aplicación de móvil, y que puede dictaminar, tras un A/B testing, que es más adecuado ubicar un botón en la parte superior o inferior de la pantalla&lt;/li&gt;
  &lt;li&gt;Sistemas externos con los que interactúamos a través de una API REST, y que pueden cambiar su contrato, haciéndonos modificar nuestros clientes de dicha API&lt;/li&gt;
  &lt;li&gt;Los contables de nuestra empresa, que pueden añadir nuevos conceptos a contabilizar en un documento determinado que estemos generando&lt;/li&gt;
  &lt;li&gt;Los arquitectos software de nuestra empresa, que por capricho pueden decidir cambiar un framework determinado y obligarnos a rehacer la implementación de una funcionalidad concreta para adaptarse a dicho framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es decir, un rol abarca aspectos muy heterogéneos.&lt;/p&gt;

&lt;p&gt;La idea es que, cada clase deberá satisfacer las necesidades de un rol o actor determinado, &lt;strong&gt;y sólo ese&lt;/strong&gt;. Esto se traduce en que si las necesidades de dos actores diferentes cambian al mismo tiempo, es materialmente imposible que dichos cambios apliquen en la misma clase.&lt;/p&gt;

&lt;h2 id=&quot;por-qué-es-importante&quot;&gt;Por qué es importante&lt;/h2&gt;

&lt;p&gt;En primer lugar, si seguimos este principio jamás se dará la situación de que dos programadores realicen cambios en el mismo fichero si trabajan en tareas diferentes, evitando todo tipo de desagradables conflictos en el control de versiones. Pero esto es una ventaja pequeña comparada con la principal de todas, y que define el conocido como “valor primario del software”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Software is soft” (Uncle Bob)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Así es, el software es “blando”, se puede moldear y modificar según nuestras necesidades. Si en un momento determinado esto deja de ocurrir el software perderá su principal valor y dejará de servirnos, porque en el mundo actual el cambio es constante y debemos adaptarnos a él tan rápido como sea posible, y de forma sostenible.&lt;/p&gt;

&lt;p&gt;Este principio es incluso más importante que el “valor secundario del software”, y que viene a decir “el software debe satisfacer las necesidades del usuario”. Por increíble que parezca, el primer valor es más importante, porque si se da la situación de que un sistema que acabamos de desarrollar no satisface completamente las necesidades del usuario, siempre será posible transformarlo (“moldearlo”) para que así sea, y cuánto mejor diseñado esté más sencillo será.&lt;/p&gt;

&lt;p&gt;Volviendo al SRP, si una clase no lo cumple ocurrirán las siguientes cosas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El número de líneas de código de la clase comenzará a crecer sin ningún tipo de estrategia que limite el crecimiento&lt;/li&gt;
  &lt;li&gt;Nuestra clase necesitará utilizar diferentes colaboradores muy heterogéneos (ejemplo: un cliente http, y una API de acceso a base de datos, entre otros). Esto hace que a la larga, decisiones que sólo deberían afectar a una pequeña porción de código tienen un efecto en cadena devastador&lt;/li&gt;
  &lt;li&gt;Comenzaremos a compartir código entre diferentes responsabilidades, código que acoplará cosas que no deberían estarlo. Por ejemplo, una función de utilidad para parsear un mensaje determinado, utilizada a la vez tras extraer el cuerpo en una respuesta HTTP y un mensaje de la base de datos. Si por algún motivo, el contrato de la API REST cambia pero los mensajes en base de datos permanecen inalterados el impacto será relativamente grande&lt;/li&gt;
  &lt;li&gt;Nuestras clases serán extraordinariamente difíciles de testear, principalmente mediante tests unitarios&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cómo-conseguirlo&quot;&gt;Cómo conseguirlo&lt;/h2&gt;

&lt;p&gt;La mejor forma de diseñar clases que cumplan con el SRP es siguiendo dos sencillas reglas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Desarrollo mediante TDD: los tests unitarios son la mejor forma de poner presión sobre nuestro diseño para que nuestras clases tengan responsabilidades bien definidas&lt;/li&gt;
  &lt;li&gt;Refactorizando: la refactorización de nuestro código, para aumentar su legibilidad es clave. En ocasiones, mediante el refactoring emergen responsabilidades que se nos habían pasado por alto&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Precisamente mi tercer mantra está muy relacionado con este último punto, y hablaré de él en el siguiente post.&lt;/p&gt;

&lt;h2 id=&quot;otros-niveles-de-abstracción-paquetes-y-aplicaciones&quot;&gt;Otros niveles de abstracción: paquetes y aplicaciones&lt;/h2&gt;

&lt;p&gt;Tras las clases tenemos los paquetes, y aquí de nuevo deberíamos esforzarnos por crear paquetes bien cohesionados. Sobre este tema, os recomiendo encarecidamente que leáis &lt;a href=&quot;http://olivergierke.de/2013/01/whoops-where-did-my-architecture-go/&quot;&gt;este esencial post&lt;/a&gt;, que explica las diferencias entre layers y slices, y cuál es la mejor forma de diseñar nuestros paquetes para ajustarse a estos criterios. En pocas palabras, viene a decir que no organicéis vuestros paquetes así:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;model
    &lt;ul&gt;
      &lt;li&gt;Account&lt;/li&gt;
      &lt;li&gt;Client&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;service
    &lt;ul&gt;
      &lt;li&gt;AccountService&lt;/li&gt;
      &lt;li&gt;ClientService&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;repository
    &lt;ul&gt;
      &lt;li&gt;AccountDAO&lt;/li&gt;
      &lt;li&gt;ClientDAO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sino así:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;account
    &lt;ul&gt;
      &lt;li&gt;Account&lt;/li&gt;
      &lt;li&gt;AccountService&lt;/li&gt;
      &lt;li&gt;AccountDAO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;client
    &lt;ul&gt;
      &lt;li&gt;Client&lt;/li&gt;
      &lt;li&gt;ClientService&lt;/li&gt;
      &lt;li&gt;ClientDAO&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creo que queda clara la idea, y si queréis profundizar &lt;a href=&quot;http://olivergierke.de/2013/01/whoops-where-did-my-architecture-go/&quot;&gt;ya sabéis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para terminar, pasemos al nivel de aplicación, algo que quizás puede sonar extraño, pero no lo es tanto en este mundo donde los &lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;microservicios&lt;/a&gt; son el último grito. Este nivel puede que sea el único donde os diga de inicio que reconsideréis bien vuestra decisión antes de decidir desplegar una responsabilidad única como una aplicación independiente. Esa no fue la idea con la que surgieron los microservicios, y os remito a &lt;a href=&quot;http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html&quot;&gt;este otro excelente post&lt;/a&gt; para que tengáis en cuenta todas las consideraciones necesarias en el momento que os decidáis por esta arquitectura.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ventanas rotas</title>
   <link href="http://www.raulavila.com/2016/09/ventanas-rotas/"/>
   <updated>2016-09-12T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2016/09/ventanas-rotas</id>
   <content type="html">&lt;p&gt;En un &lt;a href=&quot;/2016/07/mis-5-mantras/&quot;&gt;post reciente&lt;/a&gt; repasaba cinco mantras que tengo muy presentes a diario cuando desarrollo software. Pasé un poco por encima de todos ellos, pero me quedó la sensación de que hay mucho que rascar y en lo que debería entrar en detalle.&lt;/p&gt;

&lt;p&gt;Así que en este post y alguno que vendrá profundizaré en todos, o casi todos, estos mantras. Comenzamos con las ventanas rotas (&lt;code class=&quot;highlighter-rouge&quot;&gt;Don't leave broken windows&lt;/code&gt;).&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;niveles-o-gravedad-de-ventanas-rotas&quot;&gt;Niveles (o gravedad) de ventanas rotas&lt;/h2&gt;

&lt;p&gt;Si no habéis leído &lt;a href=&quot;/2016/07/mis-5-mantras/&quot;&gt;el post a que me refiero más arriba&lt;/a&gt;, echadle un vistazo para saber que es una ventana rota…¿ya?&lt;/p&gt;

&lt;p&gt;Bien, como todo en esta vida, no hay nada completamente blanco ni negro, sino diferentes tonos de grises. Lo mismo ocurre con estos descuidos que deterioran nuestro código, los hay muy flagrantes, mientras que otros podrían pasarse por alto (aunque no deberíamos). Como programadores, y para obtener el máximo valor posible de nuestro tiempo, debemos saber actuar consecuentemente según la gravedad de lo que veamos.&lt;/p&gt;

&lt;p&gt;Siguiendo con el símil del edificio, sería algo así como diferenciar entre una ventana deteriorada en la primera planta o el bajo, que es una llamada clara a los vándalos para llevar a cabo sus fechorías, frente a una ventana rota en la buhardilla de un edificio de siete plantas. Ambos desperfectos deben repararse, pero el segundo quizás pueda esperar un poco más, según las prioridades que tengamos en ese momento.&lt;/p&gt;

&lt;p&gt;Según esto, y para simplificar al máximo, digamos que habrá tres posibles niveles de ventanas rotas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Grave: se trata de problemas flagrantes que, si los dejamos estar, llevarán de manera irremediable y rápida a un deterioro de nuestro código y/o proyecto. Deben repararse cuanto antes, tan pronto como sean detectados&lt;/li&gt;
  &lt;li&gt;Medio: son problemas que saltan a la vista, pero que pueden posponerse un tiempo razonable, por ejemplo, como tareas en nuestro siguiente sprint o iteración. En ningún caso deben posponerse eternamente (“ya lo haremos en el siguiente sprint…”), pues en tal caso daría a entender que como equipo no nos preocupa excesivamente la calidad de nuestro software&lt;/li&gt;
  &lt;li&gt;Leve: son pequeños problemas o descuidos con los que podemos vivir, y que sin embargo, la mayoría de las veces son extremadamente fáciles de resolver. No tiene sentido añadir su resolución como tareas a nuestro backlog, ya que no debería tomar más de 10 o 20 minutos. Si nuestra estimación es mayor, deberíamos considerar el problema como de nivel medio&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ejemplos-de-ventanas-rotas&quot;&gt;Ejemplos de ventanas rotas&lt;/h2&gt;

&lt;p&gt;A continuación pasaré a listar una serie de problemas que he venido viendo en mis últimos años como programador, y que entran claramente en la categoría de ventanas rotas. Muchos de ellos los he detectado en mis primeros días en el proyecto, cuando trato de familiarizarme con el código, y normalmente intento arreglarlos en la medida de lo posible antes de ponerme manos a la obra con el día a día.&lt;/p&gt;

&lt;h3 id=&quot;fichero-readme&quot;&gt;Fichero README&lt;/h3&gt;

&lt;p&gt;Tener un fichero README en nuestros repositorios de código es &lt;strong&gt;fundamental&lt;/strong&gt;. A veces parece que la gente se agarra como un clavo ardiendo al &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt; cuando dice que hay que priorizar “Working Software over comprehensive documentation”, y lo traducen como “No es necesario documentar”.&lt;/p&gt;

&lt;p&gt;Esto es una atrocidad. Por favor, desde el día cero, escribid y mantened un fichero README que contenga información básica como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Resumen de nuestra aplicación (en dos o tres líneas, en qué consiste y qué problema resuelve)&lt;/li&gt;
  &lt;li&gt;Cómo construir el proyecto&lt;/li&gt;
  &lt;li&gt;Cómo y dónde desplegar el proyecto&lt;/li&gt;
  &lt;li&gt;Cómo testear el código (automática, y en menor medida, manualmente)&lt;/li&gt;
  &lt;li&gt;Qué dependencias existen (base de datos, message broker, etc), y cómo conectarse a ellas&lt;/li&gt;
  &lt;li&gt;Estrategia de versionado&lt;/li&gt;
  &lt;li&gt;Convenciones a utilizar (por ejemplo, formato de los mensajes de commit, link a guía de estilo, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seguramente me deje algunas cosas. La idea es, que si alguien nuevo en nuestro proyecto no es capaz de poner a funcionar el sistema sin un soporte constante de los empleados más veteranos (¡ojo! un mínimo soporte es necesario), entonces hay algo que falta en nuestro fichero README.&lt;/p&gt;

&lt;h3 id=&quot;demasida-documentación-y-desactualizada&quot;&gt;Demasida documentación (y desactualizada)&lt;/h3&gt;

&lt;p&gt;Es el contrapunto de la sección anterior. En las primeras fases de un proyecto escribimos toneladas de documentación, conteniendo requisitos, diseño, etc, en forma de Wiki o en documentos de Word, y según aumenta la carga de trabajo no mantenemos estos documentos, convirtiéndose en una fuente de confusión importante.&lt;/p&gt;

&lt;p&gt;En general, considero que es fundamental tener documentada la arquitectura a alto nivel de nuestro proyecto, pero los detalles de implementación deben estar en un solo lugar, el código. Por otro lado, cada vez que os veáis iniciando la escritura de un documento que sabéis llevará tiempo, pensad en el valor que estáis añadiendo, y en la “deuda de tiempo” que estáis contrayendo al escribirlo. Una deuda de tiempo no es más que una acción concreta que nos demandará la dedicación de un tiempo adicional en el futuro. &lt;a href=&quot;http://jamesclear.com/time-assets&quot;&gt;Aquí&lt;/a&gt; podéis leer más sobre esto.&lt;/p&gt;

&lt;h3 id=&quot;código-muerto-dead-code&quot;&gt;Código muerto (dead code)&lt;/h3&gt;

&lt;p&gt;Se trata de código que permanece en nuestro proyecto pero no es invocado por nadie, y por tanto, inútil. Mucha gente decide dejar ese código “por si lo necesito en el futuro”. Yo hice esto mucho en el pasado, y la verdad es que nunca me vi recuperando dicho código. Además, existe una cosa llamada control de versiones :) que nos facilita enormemente la labor de recuperar código implementado tiempo atrás.&lt;/p&gt;

&lt;p&gt;Este problema pertenece al grupo nivel medio. Con las herramientas actuales es muy sencillo detectar código muerto, y su eliminación es muy sencilla.&lt;/p&gt;

&lt;h3 id=&quot;código-comentado&quot;&gt;Código comentado&lt;/h3&gt;

&lt;p&gt;Siendo un subconjunto de código muerto, esto me parece aún más aberrante. Por favor, no dejéis nunca código comentado en vuestro software.&lt;/p&gt;

&lt;h3 id=&quot;tests-ignorados&quot;&gt;Tests ignorados&lt;/h3&gt;

&lt;p&gt;Se trata de tests que un día fallaron, y para continuar con lo que estábamos haciendo sin rommper nuestro entorno de integración continua, les añadimos un &lt;code class=&quot;highlighter-rouge&quot;&gt;@Ignore&lt;/code&gt;, sin especificar claramente el motivo. Más adelante, cuando alguien ve el &lt;code class=&quot;highlighter-rouge&quot;&gt;@Ignore&lt;/code&gt;, lo quita, y ve que el test falla, lo vuelve a poner, así que se queda ahí, para siempre.&lt;/p&gt;

&lt;p&gt;Sólo veo un caso en el que hacer esto está justificado, cuando queremos subir código “en progreso”, mientras trabajamos en una nueva funcionalidad. Dicho código no está expuesto al usuario final, y la nueva funcionalidad no estará terminada hasta que dicho tests pase. Cualquier otro caso es una ventana rota, y de gravedad.&lt;/p&gt;

&lt;h3 id=&quot;utilizar-varias-librerías-para-hacer-la-misma-cosa&quot;&gt;Utilizar varias librerías para hacer la misma cosa&lt;/h3&gt;

&lt;p&gt;Un desarrollador decide añadir una librería de utilidad para una tarea concreta, por ejemplo trabajar con JSON, y elige &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Más tarde, otro desarrollador diferente necesita trabajar con JSON y decide añadir &lt;a href=&quot;https://github.com/google/gson&quot;&gt;GSON&lt;/a&gt; al proyecto. ¡Por lo que tenemos dos librerías para hacer la misma cosa!&lt;/p&gt;

&lt;p&gt;Para evitar este tipo de problemas, es muy importante llevar a cabo &lt;a href=&quot;/2015/03/code-reviews/&quot;&gt;revisiones de código&lt;/a&gt;, ya que en última instancia esto no es más que un problema de comunicación. Si ya es demasiado tarde, y ambas librerías llevan conviviendo un tiempo, más pronto que tarde deberíamos unificar en una por consistencia.&lt;/p&gt;

&lt;h3 id=&quot;fórmato-del-código&quot;&gt;Fórmato del código&lt;/h3&gt;

&lt;p&gt;¿Quién no se ha encontrado alguna vez con una clase como esta?:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DishImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dish&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cooked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredientList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DishImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ingredient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - Adding ingredient %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ingredientList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ingredient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ingredientList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;There are no ingredients to mix&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - Mixing ingredients: %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;ingredientList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Ingredients are not mixed, please call mix first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - Cooking...%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cooked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Dish is not cooked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - Serving...%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Vemos ciertas incosistencias en el código, como dos formas diferentes de colocar las llaves de inicio y fin de bloque (en algunos casos está en una línea separada y en otros no), dos formas de indentar el código, dos formas de formatear sentencias &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; con una sola instrucción en su bloque (con llaves o sin ellas), diferentes convenciones para nombrar los métodos (camel case y guiones bajos), etc.&lt;/p&gt;

&lt;p&gt;Es muy importante que todos los programadores se pongan de acuerdo en una guía de estilo a seguir, y la respeten. La máxima aquí debería ser que nadie pueda decir quién ha escrito un fragmento de código basándose en el estilo.&lt;/p&gt;

&lt;p&gt;En Internet es muy fácil encontrar buenos ejemplos de estas guías como referencia, por ejemplo &lt;a href=&quot;https://google.github.io/styleguide/javaguide.html&quot;&gt;la de Google&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;insuficiente-cobertura-de-tests&quot;&gt;Insuficiente cobertura de tests&lt;/h3&gt;

&lt;p&gt;Si seguís la metdología TDD esto no debería suponer un gran problema, pero en caso contrario puede darse que nuestros tests solo cubran un 60-70% de nuestro código de producción (¡o aún menos!).&lt;/p&gt;

&lt;p&gt;En los criterios de aceptación de nuestras historias de usuario debería estar siempre bien claro que una historia no se puede entregar si disiminuye la cobertura de tests, que en ningún caso debería bajar de un 90-95%. Y si baja, habría que analizar los motivos.&lt;/p&gt;

&lt;p&gt;En cualquier caso, la cobertura de tests jamás debería ser un fin en sí mismo, sino una medida de calidad, así que cuidado con esto.&lt;/p&gt;

&lt;h3 id=&quot;acciones-manuales-en-los-despliegues&quot;&gt;Acciones manuales en los despliegues&lt;/h3&gt;

&lt;p&gt;El despliegue de una nueva versión de nuestro proyecto debería estar totalmente automatizado. Idealmente tendremos una tarea en nuestro entorno de integración continua que lleve a cabo todas las acciones necesarias, y que de nosotros solo exiga &lt;strong&gt;pulsar un botón&lt;/strong&gt;. Cualquier acción adicional es un desperdicio de tiempo que debe ser analizada para su automatización.&lt;/p&gt;

&lt;h3 id=&quot;entorno-de-integración-continua-inestable&quot;&gt;Entorno de integración continua inestable&lt;/h3&gt;

&lt;p&gt;Cuando nuestro entorno de integración continua está más tiempo en rojo que en verde, es que algo estamos haciendo mal. Con esto quiero decir, que el 95% del tiempo nuestras tareas (en Jenkins, Concourse, Bamboo, o lo que sea) deben ejecutarse de manera exitosa. Si esto no ocurre hay que parar cualquier trabajo que tengamos entre manos para estabilizar este problema.&lt;/p&gt;

&lt;h3 id=&quot;imports-no-utilizados&quot;&gt;Imports no utilizados&lt;/h3&gt;

&lt;p&gt;Esto es muy típico y muy fácil de evitar. Añadimos una sentencia &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; a nuestro fichero de clase porque lo necesitamos en un momento determinado. Pero más adelante eliminamos el código (porque estamos refactorizando y nos lo llevamos a otro lado, por ejemplo), dejando allí la sentencia &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;, que es completamente inútil.&lt;/p&gt;

&lt;p&gt;Eliminar “unused imports” es muy sencillo en los IDEs actuales. Existen atajos de teclado que lo hacen de forma instantánea, e incluso la opción de activar &lt;a href=&quot;http://stackoverflow.com/questions/19026756/how-configure-optimize-imports-on-the-fly-without-rearrange-import-statements&quot;&gt;opciones&lt;/a&gt; que escanean permanentemente nuestro código y eliminan los que no necesitemos.&lt;/p&gt;

&lt;h3 id=&quot;dependencias-no-utilizadas&quot;&gt;Dependencias no utilizadas&lt;/h3&gt;

&lt;p&gt;Mientras que el punto anterior entra dentro de los problemas leves, tener dependencias en nuestro código que han dejado de utilizarse abre la puerta a potenciales problemas que además pueden ser muy difíciles de detectar, debido a conflictos entre dependencias transitivas, por ejemplo.&lt;/p&gt;

&lt;p&gt;Tan pronto como dejéis de utilizar una dependencia, eliminadla de vuestro proyecto (del fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;pom&lt;/code&gt; de Maven, por ejemplo).&lt;/p&gt;

&lt;h3 id=&quot;estrategia-de-git-sin-determinar&quot;&gt;Estrategia de Git sin determinar&lt;/h3&gt;

&lt;p&gt;Sin haber establecido una directrices claras sobre como trabajar con Git, cada desarrollador toma sus propias decisiones, y nos encontramos con un repositorio Git plagado de ramas (muchas muertas tras ser fusionadas con master), montones de merges, etc.&lt;/p&gt;

&lt;p&gt;No voy a proponer aquí una solución ideal para trabajar con Git, &lt;a href=&quot;http://www.creativebloq.com/web-design/choose-right-git-branching-strategy-121518344&quot;&gt;hay varias estrategias&lt;/a&gt; (aka workflows), pero en ningún caso debéis dejar al libre albedrío de cada persona la estrategia a utilizar.&lt;/p&gt;

&lt;h3 id=&quot;código-sucio&quot;&gt;Código sucio&lt;/h3&gt;

&lt;p&gt;No voy a entrar en muchos detalles aquí. Casi todos sabemos lo que es código sucio, y como profesionales nunca deberíamos aceptar entregar funcionalidades desarrolladas de forma que su mantenimiento sea más complicado debido a la poca legibilidad del código. No es la primera vez que lo recomiendo (ni será la última), pero si no lo habéis hecho, leed &lt;a href=&quot;https://www.amazon.es/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;amp;qid=1473708316&amp;amp;sr=8-1&amp;amp;keywords=Clean+Code&quot;&gt;Clean Code&lt;/a&gt; o &lt;a href=&quot;https://www.amazon.es/Code-Complete-Practical-Costruction-Professional/dp/0735619670/ref=sr_1_1?ie=UTF8&amp;amp;qid=1473708342&amp;amp;sr=8-1&amp;amp;keywords=Code+Complete&quot;&gt;Code Complete&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cómo última nota en este apartado, por favor no hagáis algo de lo que yo mismo me declaro culpable de haber incurrido muchas veces en el pasado: ¡mezclar inglés y español! Idealmente todo nuestro código debería estar en inglés, pero si utilizáis español para nombrar variables o métodos nunca mezcléis, dando lugar a engendros como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iniciar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Me duelen los ojos de verlo :)&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Creo que he cubierto varios apartados importantes del desarrollo que no debemos descuidar. ¿Echáis alguno de menos?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pair Programming</title>
   <link href="http://www.raulavila.com/2016/08/pair-programming/"/>
   <updated>2016-08-21T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2016/08/pair-programming</id>
   <content type="html">&lt;p&gt;Hará algo más de cuatro años, hice una entrevista para una empresa en la que trabajaban utilizando Extreme Programming como metodología. En aquel momento, yo no tenía ni idea de lo que era eso, así que me contaron un poco en qué consistía, y fue algo así: “Todas las mañanas tenemos una reunión de pie, para que así sea más corta, donde hablamos de lo que hicimos el día anterior. Luego, nos ponemos entorno a ese tablón lleno de post-its, que representan tareas, y cada pareja, porque aquí programamos en pareja, elige una tarea y trabaja en ella”.&lt;/p&gt;

&lt;p&gt;Aquello me sonó a algo extremadamente diferente a todo lo que conocía, y, la verdad, me tiró un poco para atrás, sobre todo el hecho de estar todo el día trabajando con alguien en el mismo ordenador. “¡No podré ponerme música!”, pensé. Eso, sumado al hecho de que las tecnologías que utilizaban no me llamaban en exceso, y que me encontraba bastante cómodo en mi puesto de trabajo, me hicieron rechazar su oferta.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Estamos en 2016. Llevo viviendo en Londres desde 2014, y cuando tomé la difícil decisión de dar el salto tenía claro que si lo hacía intentaría sacar el máximo provecho a esta experiencia. Así que desde el primer día empecé a asistir a meetups, workshops, etc. En muchos de estos workshops se trabaja por parejas en problemas con el objetivo de familizarse con tecnologías o prácticas. El año pasado asistí al &lt;a href=&quot;/2015/11/code-retreat-2015/&quot;&gt;Global day of code retreat&lt;/a&gt;, que me pareció una pasada, y donde básicamente te tiras todo el día trabajando en pareja con diferentes personas.&lt;/p&gt;

&lt;p&gt;Comencé a pensar que el pair programming no estaba tan mal. Lo disfrutaba mucho, notaba que aprendía un montón, y eso sumado a mi creciente interés por el &lt;a href=&quot;/2015/08/primera-experiencia-tdd/&quot;&gt;TDD&lt;/a&gt;, el Spring Framework y las plataformas Cloud se materializó en mi candidatura para trabajar en &lt;a href=&quot;https://pivotal.io/&quot;&gt;una empresa&lt;/a&gt; que sumaba todo esto y más.&lt;/p&gt;

&lt;p&gt;Seis meses después de haber empezado a trabajar aquí, creo que me siento en posición de dar mi opinión sobre lo que supone trabajar con Pair Programming &lt;strong&gt;full time&lt;/strong&gt;. Sí, habéis leído bien, trabajar de 9 a 6 compartiendo ordenador con una persona. ¡Ojo!, compartimos ordenador, pero no teclado y ratón, ya que cada miembro de la pareja tiene uno propio. Lo habitual es que una persona conduzca la codificación, mientras la otra intenta abstenerse y limitarse a revisar y hablar sobre lo que se está haciendo. Para evitar el aburrimiento ambos roles se van turnando con frecuencia.&lt;/p&gt;

&lt;h2 id=&quot;los-pros&quot;&gt;Los pros&lt;/h2&gt;

&lt;p&gt;Son muchos, y con un peso específico determinante sobre los contras. A saber:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Al trabajar dos personas en el mismo problema, y tener que discutir cada aspecto de la codificación, no se cometen el mismo número de fallos “tontos” que cuando se trabaja en solitario. Este tipo de fallos son muchas veces los que nos hacen perder más tiempo cuando algo no funciona, y seguramente todos tengáis alguno reciente en mente&lt;/li&gt;
  &lt;li&gt;Aprendes un montón: esto ocurre porque tu pareja siempre sabrá algo que tú no, desde cosas sencillas como herramientas de líneas de comandos, hasta cosas más genéricas como patrones, pasando por funcionalidades del lenguaje que se esté utilizando. Este punto alcanza su máxima expresión cuando tienes que programar en un lenguaje que es nuevo para tí pero no para el otro. No creo que haya mejor forma de aprender un nuevo lenguaje de programación que mediante el pair programming. Creedme, la experiencia es tremenda&lt;/li&gt;
  &lt;li&gt;Enseñas un montón: de la misma forma que el otro sabrá cosas que tú no, la inversa también es cierta, y te verás en muchos momentos explicando cómo hacer determinadas cosas. Dejando aparte lo satisfactorio que es esto, también notarás que enseñar es una buena forma de revisar tus conocimientos y descubrir lagunas en lo que sabes&lt;/li&gt;
  &lt;li&gt;El conocimiento es compartido: la rotación de las parejas es frecuente, por lo que se elimina casi por completo el problema del “single point of failure”, donde la ausencia de un miembro del equipo hace temblar a todo el mundo. En efecto, mediante esta técnica es muy complicado que alguien acapare conocimiento y se haga imprescindible. Esto puede romper los esquemas de mucha gente, ya que desafía bastante el modelo tradicional de escalera corporativa, donde hay que crearse un nicho de conocimiento para ir ascendiendo y demás. Si estás en este grupo, párate a pensar si en tu oficina buscas un beneficio personal o el beneficio de tu equipo, y por consiguiente, de tu empresa&lt;/li&gt;
  &lt;li&gt;Es divertido: las personas somos seres sociables, nos gusta hablar con la gente, discutir de cosas, gastar bromas. Pair programming fomenta esto al máximo, por lo que la idea de programador aislado con sus cascos la mayor parte del día desaparece por completo, repercutiendo en una mayor salud mental individual :)&lt;/li&gt;
  &lt;li&gt;Ayuda a conseguir equipos más cohesionados: en el libro &lt;a href=&quot;https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113&quot;&gt;Peopleware&lt;/a&gt; se habla de los “jelled teams”, equipos que alcanzan velocidad de crucero y se convierten en imparables. Llegar a ese punto no es cosa de un día, y se me ocurren pocas formas más rápidas de lograrlo que el pair programming&lt;/li&gt;
  &lt;li&gt;El código generado tiene menos fallos: cuando se trabaja con pair programming se está llevando a cabo una &lt;a href=&quot;/2015/03/code-reviews/&quot;&gt;revisión de código&lt;/a&gt; a tiempo completo, por lo que el porcentaje de bugs desciende considerablemente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seguramente me esté dejando algo en el tintero, pero creo que tras leer todos estos puntos deberiáis tener una buena idea de la experiencia.&lt;/p&gt;

&lt;h2 id=&quot;los-contras&quot;&gt;Los contras&lt;/h2&gt;

&lt;p&gt;Como todo en esta vida, también hay contras, aunque creo que se pueden mitigar en su mayoría:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Es agotador: las primeras semanas trabajando con pair programming salía de la oficina cansadísimo, y no porque sea un endeble, todo el mundo me comentaba que seguramente estuviera pasando por eso. El hecho de estar todo el día hablando con otra persona, y completamente enfocado en el trabajo (ya que no te puedes distraer tanto como trabajando en solitario), hace que tu mente esté en las últimas al final del día. Sin embargo, como las personas somos tan adaptables, tras tres o cuatro semanas te acostumbras a ese ritmo de trabajo y no es tan duro ni de lejos&lt;/li&gt;
  &lt;li&gt;Colisiones de ratón y teclado: en ocasiones, la persona que en teoría no debería tocar el teclado y ratón, no puede evitar hacerlo para comentar una cosa que es complicada de señalar sin tomar el mando. La mayoría de las veces se toma el control por impulso, y puede resultar molesto para el otro, pero es algo inevitable. Cuando pasa, lo mejor es tomárselo con humor si tú eres el interrumpido, y si eres el que interrumpe, intenta avisar al otro educadamente (“¿puedo tomar el ratón un momento, por favor?”)&lt;/li&gt;
  &lt;li&gt;Buscar algo en internet es algo incómodo: cuando estamos bloqueados con algo y nos vamos a Google a buscar una solución, personalmente siempre he notado que cada persona lee de forma aleatoria diferentes contenidos, así que realmente se están siguiendo dos líneas de pensamiento. Desde cierto punto de vista puede ser beneficioso, ya que quizás se llegue a la solución de forma más rápida, pero personalmente, muchas veces pienso que lo haría mejor en solitario. Cuando esto ocurre, es perfectamente válido proponer la alternativa de investigar en paralelo utilizando dos ordenadores diferentes&lt;/li&gt;
  &lt;li&gt;Choques de personalidad: esto es algo inevitable, cada persona es un mundo, y tantas horas juntos lleva a momentos de relativa tensión cuando hay desacuerdos. Esto lo he vivido más veces trabajando con programadores de nuestros clientes que con programadores de nuestra empresa, ya que en nuestro proceso de selección buscamos a gente que se adapte bien al proceso, pero no tenemos este poder con la gente de fuera que viene a trabajar con nosotros. La paciencia es muy importante cuando se trabaja con pair programming, y nunca, nunca, se debe ser maleducado o grosero con el otro&lt;/li&gt;
  &lt;li&gt;Desconexión de una mitad: si en un momento determinado notas que estás desconectando de la tareas entre manos, o que le está ocurriendo al otro, lo mejor que se puede hacer es proponer un break. En nuestras oficinas tenemos mesas de ping pong para facilitar esto, y viene muy bien para cambiar radicalmente de actividad durante diez minutos y desconectar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;No creo que la lectura de este artículo convenza a nadie para introducir pair programming en su día a día, pero sí espero que haya quedado claro por qué es una práctica muy recomendable. Para profundizar más, echad un vistazo al &lt;a href=&quot;https://www.amazon.es/Extreme-Programming-Explained-Embrace-Embracing/dp/0321278658/ref=sr_1_1&quot;&gt;libro de Kent Beck sobre Extreme Programming&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mis cinco mantras</title>
   <link href="http://www.raulavila.com/2016/07/mis-5-mantras/"/>
   <updated>2016-07-27T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2016/07/mis-5-mantras</id>
   <content type="html">&lt;p&gt;En mi día a día, cuando estoy desarrollando software, cosa que ocurre la mayor parte del tiempo, intento seguir una serie de principios y buenas prácticas de cara a producir código con la máxima calidad. La mayoría conocemos, al menos de oídas, cuales son esos principios, aunque no siempre los apliquemos: &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt;, &lt;a href=&quot;https://es.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;Siglas aparte, y a un nivel algo diferente, con el paso de los años he ido interiorizando una serie de mantras que están presentes en mi cabeza de forma permanente, y creo que me han sido de gran ayuda para mejorar como programador. Últimamente, y gracias al entorno de pair programming en que me muevo, los he empezado a dar aún más importancia, ya que en varias ocasiones me he visto en la tesitura de tener que explicar sus beneficios al que fuera mi compañero en ese momento.&lt;/p&gt;

&lt;p&gt;En este post pasaré lista a estos “mantras”, que en general no son más que lecciones aprendidas en determinados libros o video-tutoriales, y que han ido calando en mi subconsciente. Me permitiré la licencia de ponerlos en inglés, ya que así los aprendí y así los utilizo, y los listaré por orden de importancia.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;dont-leave-broken-windows&quot;&gt;Don’t leave broken windows&lt;/h2&gt;

&lt;p&gt;“No dejes ventanas rotas”. Sin lugar a dudas la sección más importante del libro &lt;a href=&quot;https://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;, donde lo leí por primera vez.&lt;/p&gt;

&lt;p&gt;Resulta que está (¿científicamente?) demostrado que, cuando un edificio está abandonado, puede aguantar un tiempo razonable sin que la gente que lo ve a diario se percate de la situación. Pero siempre llega un momento donde se produce un hecho crucial que lo cambia todo: una ventana rota. Dicha ventana, al tratarse de un edificio abandonado, no es reparada, por lo que rápidamente se hace patente la situación de abandono, los vándalos comienzan a hacer de las suyas, irrumpen en el edificio…y el deterioro es imparable.&lt;/p&gt;

&lt;p&gt;Exactamente la misma idea debe aplicarse al desarrollo software. Cuando tomamos determinados atajos para entregar algo en el menor tiempo posible, y nuestro código refleja claramente nuestro descuido, los que vengan después (que podemos ser nosotros mismos, programadores que compartan equipo en este momento u otros por llegar) sacarán como lectura que no es tan importante ser cuidadosos con el código que producimos, y poco a poco, y cada vez más rápido, nuestra aplicación o sistema se irá deteriorando.&lt;/p&gt;

&lt;p&gt;Ejemplos de ventanas rotas pueden ser cosas tan flagrantes como no escribir tests automatizados de una nueva funcionalidad, pero también otras menos importantes a priori como no ser consistentes en nuestro estilo de codificación (utilizar diferentes indentaciones, formatear los bloques de forma diferente, etc) o no eliminar dependencias que nuestro código ha dejado de utilizar.&lt;/p&gt;

&lt;p&gt;Por favor, no dejéis ventanas rotas. ¡Ojo!, que no estoy hablando de &lt;a href=&quot;https://es.wikipedia.org/wiki/Deuda_t%C3%A9cnica&quot;&gt;deuda técnica&lt;/a&gt;, que puede estar justificada en determinadas circunstancias (siempre que seamos conscientes de estar incurriendo en dicha deuda y volvamos a ella en el futuro).&lt;/p&gt;

&lt;h2 id=&quot;do-one-thing-do-it-well-and-do-it-only&quot;&gt;Do one thing, do it well and do it only&lt;/h2&gt;

&lt;p&gt;“Haz una cosa, hazla bien, y sólo esa”. Este mantra se lo debo a &lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;Uncle Bob&lt;/a&gt;, y no es más que el &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt; formulado de forma pegadiza :)&lt;/p&gt;

&lt;p&gt;No creo que sea necesario profundizar mucho aquí. Nunca, &lt;strong&gt;nunca&lt;/strong&gt;, debemos añadir más de una responsabilidad a nuestros métodos o clases. En general, mi norma es que si necesitas una conjunción (“y…”, “o…”) para describir lo que hace un determinado método, tu método está haciendo demasiadas cosas.&lt;/p&gt;

&lt;p&gt;Otra forma de ver esto es pensar desde la perspectiva de los diferentes actores involucrados en nuestro sistema. Cada actor podrá motivar cambios en nuestro código, y nosotros deberemos diseñarlo de forma que los cambios de opinión de cada actor pueda motivar cambios en un lugar perfectamente aislado. Ejemplos de actores pueden ser: nuestro sistema de transporte (http, colas de mensajes…), el equipo de seguridad de nuestra empresa, los diseñadores gráficos, nuestro sistema de bases de datos…muy heterogéneo vaya.&lt;/p&gt;

&lt;h2 id=&quot;extract-till-you-drop&quot;&gt;Extract till you drop&lt;/h2&gt;

&lt;p&gt;Algo así como “extrae hasta que te caigas a pedazos”. También se lo debo a Uncle Bob, y en su serie de videos &lt;a href=&quot;https://cleancoders.com/&quot;&gt;Clean Coders&lt;/a&gt; lo complementa con esta sentencia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Methods should be small&lt;/li&gt;
    &lt;li&gt;They should be smaller than that&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dice nuestro buen amigo que un método no debería tener más de cuatro o cinco líneas de código. Yo creo que quizás se pase un poquito, pero la verdad es que, personalmente, cuando veo que un método tiene más de 10 líneas ya empiezo a sospechar.&lt;/p&gt;

&lt;p&gt;Extraer nuestro código en métodos pequeños es extremadamente sencillo hoy día con los IDE’s, y el resultado, si lo hacemos bien, es infinitamente mejor. Por otra parte esto no sólo aplica a métodos, también a clases e incluso a paquetes o módulos.&lt;/p&gt;

&lt;p&gt;Me voy a ahorrar un ejemplo, ya que no me veo capaz de hacerlo mejor que &lt;a href=&quot;https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop&quot;&gt;el autor de este mantra&lt;/a&gt;. Y por favor, si no lo habéis hecho ya, leed &lt;a href=&quot;https://www.amazon.es/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;abstractions-in-code-details-in-data&quot;&gt;Abstractions in code, details in data&lt;/h2&gt;

&lt;p&gt;“Abstracciones en código, detalles en datos”. Esto lo aprendí en el curso &lt;a href=&quot;http://www.jbrains.ca/permalink/the-worlds-best-intro-to-tdd-demo-video&quot;&gt;“World’s best intro to TDD”&lt;/a&gt;, aunque indirectamente lo venía aplicando en determinadas circunstancias.&lt;/p&gt;

&lt;p&gt;La clave de este mantra es que, cuando nos vemos codificando un método o clase con diferentes caminos de ejecución que dependen de datos de entrada o del contexto en que nuestro código se está ejecutando, suele ser posible abstraer los datos concretos fuera de nuestro código. De esta forma disminuimos la &lt;a href=&quot;https://es.wikipedia.org/wiki/Complejidad_ciclom%C3%A1tica&quot;&gt;complejidad ciclomática&lt;/a&gt; y facilitamos el testing, dos grandes beneficios que mejorarán infinitamente la calidad de nuestro software.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo muy sencillo, el siguiente código devuelve un saludo a mostrar a un usuario según su perfil:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MANAGER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Manager!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GUEST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Guest!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EMPLOYEE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Employee!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unrecognized role!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Estoy seguro de que os habéis encontrado con métodos de similar estructura más de una vez. Una alternativa que se adhiera a este principio podría ser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreetingService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greetingByRole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MANAGER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Manager!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GUEST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Guest!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EMPLOYEE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Employee!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchGreetingMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingByRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greetingByRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unrecognized role!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Claramente, los beneficios de este diseño es que nuestro método se ha convertido en inmutable (adhiriéndose de paso, al &lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;Open Closed Principle&lt;/a&gt;), sólo contiene dos caminos de ejecución en lugar de cuatro, y si necesitamos añadir nuevos roles (con sus saludos) solo tendremos que añadir una nueva entrada al Map &lt;code class=&quot;highlighter-rouge&quot;&gt;greetingByRole&lt;/code&gt;, mientras que en la primera versión deberíamos modificar el método para cada nuevo rol.&lt;/p&gt;

&lt;p&gt;Podría discutirse que la clase &lt;code class=&quot;highlighter-rouge&quot;&gt;GreetingService&lt;/code&gt; sigue sin ser inmutable, pero esto podríamos solucionarlo extrayendo la información del mapa en ficheros de configuración o de propiedades, por ejemplo, e inyectando un mapa equivalente creado por el contenedor de inyección de dependencias.&lt;/p&gt;

&lt;h2 id=&quot;make-it-work-make-it-better-make-it-pretty&quot;&gt;Make it work, make it better, make it pretty&lt;/h2&gt;

&lt;p&gt;“Haz que funcione, hazlo mejor, hazlo bonito”. Esto lo he aprendido recientemente, y es el enfoque que utilizamos en mi empresa durante el desarrollo mediante TDD. Cuando tenemos que desarrollar una determinada funcionalidad solemos seguir estos pasos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Comenzamos escribiendo los tests que la describan y guíen nuestra codificación y diseño&lt;/li&gt;
  &lt;li&gt;Nuestro objetivo es conseguir que nuestros tests se ejecuten de forma exitosa (make it work)&lt;/li&gt;
  &lt;li&gt;Una vez conseguido nos paramos a pensar en si el diseño puede mejorar (make it better)&lt;/li&gt;
  &lt;li&gt;Y una vez llevados a cabo los refactorings que consideremos oportunos, eliminamos de nuestro código cualquier “ventana rota” para dejarlo lo más limpio posible (make it pretty)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Encuentro este enfoque increíblemente efectivo, pero la verdad es que no tiene sentido si no trabajáis con TDD, así que en tal caso, &lt;a href=&quot;/2016/01/aprendiendo-TDD/&quot;&gt;empezad por ahí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Y con esto termino mis mantras. Si tú tienes otros, estaría encantado de que los añadieras en la sección de comentarios.&lt;/p&gt;
</content>
 </entry>
 

</feed>
