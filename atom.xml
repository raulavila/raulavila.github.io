<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Raúl Ávila</title>
 <link href="http://www.raulavila.com/atom.xml" rel="self"/>
 <link href="http://www.raulavila.com/"/>
 <updated>2017-09-09T19:57:33+01:00</updated>
 <id>http://www.raulavila.com/</id>
 <author>
   <name>Raul Avila</name>
   <email/>
 </author>

 
 <entry>
   <title>Los 7 pecados capitales del programador</title>
   <link href="http://www.raulavila.com/2017/09/pecados-capitales-programador/"/>
   <updated>2017-09-09T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/09/pecados-capitales-programador</id>
   <content type="html">&lt;p&gt;Inspirado por el post &lt;a href=&quot;https://jeronimopalacios.com/2015/03/los-7-pecados-capitales-del-product-owner/&quot;&gt;Los 7 pecados capitales del Product Owner&lt;/a&gt; publicado hace unos años por &lt;a href=&quot;https://twitter.com/giropa832&quot;&gt;Jerónimo Palacios&lt;/a&gt; me he decidido a recopilar los que son, para mí, los siete pecados más importantes que he cometido o he visto cometer a programadores a lo largo de mi carrera.&lt;/p&gt;

&lt;p&gt;Todos estos pecados pueden, por sí mismos, llevar a la ruina a un proyecto de desarrollo, algunos de forma más rápida que otros. Pero cuando son realmente dañinos es cuando se dan de forma conjunta.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;1-descuidar-los-tests&quot;&gt;1. Descuidar los tests&lt;/h2&gt;

&lt;p&gt;A estas alturas espero que no sea necesario explicar por qué es necesario implementar tests automatizados en las aplicaciones o sistemas que desarrollamos, ¿verdad? Es responsabilidad única de los desarrolladores garantizar el correcto funcionamiento del software entregado, así como la falta de regresión según vayamos evolucionándolo, y la única herramienta que nos permite garantizar esto en todo momento son los tests.&lt;/p&gt;

&lt;p&gt;Personalmente, no concibo entregar nada que no venga respaldado por su correspondiente suite de tests. &lt;a href=&quot;/2016/01/aprendiendo-TDD/&quot;&gt;Practicar TDD&lt;/a&gt; es una buena forma de no saltarse esta norma, pero aún con esas, siempre nos asaltará la debilidad en momentos puntuales de presión, en los que intentaremos recortar del lado más fácil, que suelen ser los tests. Por favor, no caigáis nunca en ese error porque siempre (siempre) lo acabaréis lamentando. Además, recordad la teoría de las &lt;a href=&quot;/2016/09/ventanas-rotas/&quot;&gt;ventanas rotas&lt;/a&gt; y lo que conlleva a largo plazo.&lt;/p&gt;

&lt;h2 id=&quot;2-no-hacerse-responsables-de-nuestro-sistema-de-integración-continua&quot;&gt;2. No hacerse responsables de nuestro sistema de integración continua&lt;/h2&gt;

&lt;p&gt;Desde el momento cero de un proyecto debe existir un pipeline de integración continua que chequee regularmente el estado de nuestro(s) repositorio(s) (tanto a nivel de tests como de &lt;a href=&quot;https://es.wikipedia.org/wiki/An%C3%A1lisis_est%C3%A1tico_de_software&quot;&gt;análisis estático&lt;/a&gt;, etc) y despliegue la aplicación en los entornos que corresponda. El estado de dicho pipeline debe estar en todo momento visible para todos los miembros del equipo, a poder ser en una pantalla ubicada junto a nuestras mesas, y cualquier desviación de lo que sea considerado un estado aceptable ha de ser analizada inmediatamente por un desarrollador.&lt;/p&gt;

&lt;p&gt;Es bastante frecuente que nadie se haga realmente responsable de esto que acabo de comentar. El motivo principal suele ser que siempre apetece más desarrollar nuevas funcionalidades, a fin de cuentas es más divertido. Pero del mismo modo que entregar software sin sus tests asociados se termina pagando, no rectificar una desviación en la estabilidad del pipeline CI puede pasar de ser un pequeño problemilla que ocuparía entre una y dos horas resolver, a una pelota que nadie sabe como atacar.&lt;/p&gt;

&lt;p&gt;Así que, por favor, estableced una disciplina de trabajo donde esté claro quién se va a responsabilizar de mantener vuestro pipeline CI. Pueden utilizarse diferentes estrategias, desde la persona que realizó el último commit que “rompió” el pipeline, a un miembro fijo que rote cada día o semana.&lt;/p&gt;

&lt;h2 id=&quot;3-elegir-tecnologías-para-engordar-nuestro-cv&quot;&gt;3. Elegir tecnologías para engordar nuestro CV&lt;/h2&gt;

&lt;p&gt;Hemos de elegir la mejor herramienta o tecnología para el trabajo que tenemos entre manos, y nunca dejarse llevar por la curiosidad de “probar” algo que nos llama la atención porque lo hemos visto en una conferencia o leído en un newsletter, para así de paso meterlo en la lista de tecnologías de nuestro CV. Si hacemos algo así sin tener realmente claro que es la mejor opción posible, estaremos malgastando el dinero del cliente o de la empresa que nos está pagando para nuestro propio beneficio.&lt;/p&gt;

&lt;p&gt;No estoy diciendo que haya que cerrar el abanico de opciones, en muchas ocasiones una tecnología que nos es desconocida será la adecuada, y tendremos que dedicarle tiempo para aprenderla. Pero antes de realizar la inversión debemos tener bien claro tras un análisis o comparativa previa que estamos haciendo lo correcto.&lt;/p&gt;

&lt;h2 id=&quot;4-intentar-ser-imprescindibles&quot;&gt;4. Intentar ser imprescindibles&lt;/h2&gt;

&lt;p&gt;Más de una y de dos veces, me he encontrado con compañeros que de alguna manera pensaban que era inteligente no compartir conocimiento con el resto del equipo. Esto se traducía en cosas como código escrito por ellos que era imposible de entender por nadie más, librerías añadidas de forma unilateral, decisiones de implementación no discutidas con el resto del equipo…No era extraño además que adoptaran una actitud defensiva cuando se les preguntaba por alguna de estas cosas.&lt;/p&gt;

&lt;p&gt;En nuestra profesión es relativamente frecuente encontrarse con personalidades complicadas, y por eso mismo pienso que los procesos de selección deberían valorar la empatía de los candidatos al mismo nivel que las capacidades técnicas. Es importante recordar que un buen ambiente de equipo puede romperse de un día para otro por detalles como los que he mencionado en el anterior párrafo. Debemos además fomentar que nuestros equipos tengan la propiedad colectiva del código y el conocimiento compartido por bandera.&lt;/p&gt;

&lt;h2 id=&quot;5-no-refactorizar-de-forma-responsable&quot;&gt;5. No refactorizar de forma responsable&lt;/h2&gt;

&lt;p&gt;Ya cubrí este tema recientemente en el post &lt;a href=&quot;/2017/07/etapas-refactoring/&quot;&gt;Mis etapas con el refactoring&lt;/a&gt;. En mi opinión, todo refactoring que no entre dentro del apartado “Refactoring responsable” de dicho artículo tendrá consecuencias negativas tarde o temprano.&lt;/p&gt;

&lt;p&gt;El refactoring es una actividad fundamental para conseguir software sostenible, pero también puede suponer una pérdida de tiempo si se hace cuando o donde no es necesario. Saber aplicarlo de manera efectiva es esencial.&lt;/p&gt;

&lt;h2 id=&quot;6-no-empatizar-con-el-cliente&quot;&gt;6. No empatizar con el cliente&lt;/h2&gt;

&lt;p&gt;Los clientes, además de ser quienes en última instancia nos dan de comer, son personas como nosotros, y merecen el máximo respeto y empatía por nuestra parte. Quizás el sponsor de un proyecto no sea especialmente técnico y desconozca determinados aspectos del proyecto que estamos desarrollando para él, por lo que en ocasiones desbarrará un poco (o bastante) cuando cosas como los plazos de entrega salgan a discusión.&lt;/p&gt;

&lt;p&gt;Cuando un cliente nos impone unos plazos que sabemos de antemano son completamente imposibles de llevar a cabo, y nosotros los aceptamos, sabemos que con ello comprometeremos los aspectos menos visibles de nuestros sistema, a saber: tests, calidad y mantenibilidad del código, seguridad, etc. Como profesionales debemos explicar a dicho cliente los riesgos que asumimos si seguimos adelante, y seremos transparentes al máximo para que no haya lugar a la duda, pero también nos pondremos en su piel para entender en qué situación se encuentra él para tratar de fijar esas fechas. Una vez conseguimos comprender sus motivos quizás sea más sencillo alcanzar un acuerdo de consenso.&lt;/p&gt;

&lt;p&gt;He puesto el ejemplo de los plazos porque creo que todos lo hemos experimentado, pero existen otros muchos aspectos donde comprender el punto de vista del cliente es también necesario. No profundizo más porque el tema es denso y daría para una serie de posts :).&lt;/p&gt;

&lt;h2 id=&quot;7-no-pensar-en-quién-vendrá-después&quot;&gt;7. No pensar en quién vendrá después&lt;/h2&gt;

&lt;p&gt;¿A qué me refiero con esto? Me refiero tanto a futuros programadores que tendrán que lidiar con nuestro código para corregir bugs o añadir nuevas funcionalidades como al equipo de operaciones que tendrá que desplegar la aplicación en diferentes entornos, diagnosticar posibles problemas, etc. Es por tanto, fundamental, no descuidar aspectos ya mencionados anteriormente, como la legibilidad del código, pero también otros como proporcionar una documentación adecuada (a poder ser en forma de &lt;a href=&quot;https://jesuslc.com/2016/07/12/como-escribir-un-readme-que-mole/&quot;&gt;README&lt;/a&gt;), generar unas trazas (logs) de calidad, que en caso de problema permitan detectar qué está ocurriendo y facilitar la comunicación entre desarrollo y operaciones, encapsular parámetros de configuración en un solo lugar (y documentar cómo modificarlos), etc.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Procesos de onboarding</title>
   <link href="http://www.raulavila.com/2017/09/procesos-onboarding/"/>
   <updated>2017-09-02T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/09/onboarding</id>
   <content type="html">&lt;p&gt;A lo largo de mi carrera he vivido todo tipo de procesos de onboarding. Hoy estaba reflexionando sobre este tema, ya que en mi empresa se están revisando algunas cosas al respecto, y he comenzado a rememorar los que a mí, por suerte o por desgracia, me tocaron en el pasado.&lt;/p&gt;

&lt;p&gt;Creo que muchísimas empresas no tienen realmente clara la importancia de optimizar la experiencia de aterrizaje para los nuevos empleados que entran a trabajar en sus oficinas. Y es un gravísimo error, ya que desde el día cero se está invirtiendo dinero en esa persona. Sería ideal por tanto que esa inversión genere un retorno óptimo lo más pronto posible.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;cómo-no-hacer-un-onboarding&quot;&gt;Cómo NO hacer un onboarding&lt;/h2&gt;

&lt;p&gt;Lo creáis o no, más de una y de dos veces, mi primer día de trabajo fue tal que así:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Llegar a la oficina, comentar en recepción que soy “el nuevo”. Sentarme a esperar a que venga a recibirme alguien.&lt;/li&gt;
  &lt;li&gt;Aparece una persona a recogerme. No me queda claro si será mi jefe o no.&lt;/li&gt;
  &lt;li&gt;Esa persona me conduce a la zona de la oficina donde está mi equipo, y me presenta a otra persona diferente. Al menos ahora parece que sé quién supervisará mi trabajo en los primeros días, pero no me queda claro quien era el otro.&lt;/li&gt;
  &lt;li&gt;Mi nuevo jefe me dice que me siente en una mesa, que puede tener o no un ordenador preparado para mí, y ahí me quedo esperando a que alguien me indique qué hacer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo que viene a continuación depende del caso, pero yo he vivido todo tipo de situaciones absurdas. Desde tenerme casi un mes sin ordenador, leyendo un manual impreso, hasta cambiarme de equipo tras una semana sin haber hecho apenas nada.&lt;/p&gt;

&lt;p&gt;Casi todas estas experiencias venían además con el añadido de que no me presentaban a mis compañeros en condiciones, poniéndome en la incómoda situación de tener que hacerlo yo. Al ser bastante tímido (aunque con el tiempo he ido superando parte de mi timidez) me costaba romper el hielo y pasar de presentarme a la persona que estuviera sentada a mi lado.&lt;/p&gt;

&lt;p&gt;Me consta que la excusa para que se dieran estas situaciones era siempre similar: haber entrado en un momento especialmente crítico para el proyecto.&lt;/p&gt;

&lt;p&gt;No sé si muchos de vosotros habréis experimentado algún proceso similar, pero es altamente desmotivante. Sientes que nadie te estaba esperando y que no tienen muy claro qué hacer contigo.&lt;/p&gt;

&lt;p&gt;La otra cara de la moneda es hacer un onboarding a toda prisa, ¡debido exactamente al mismo motivo! Te meten en una sala de reuniones, te explican el proyecto por encima, y te ponen a trabajar asignándote un bug o tarea sencilla, en ocasiones sin siquiera explicarte la estructura de tu equipo. En este caso, suele ocurrir además que nadie te explica el tipo de cosas que todos queremos conocer para movernos dentro de la empresa (por ejemplo, cuál es el proceso para solicitar vacaciones, correos de contacto…tareas administrativas en general, vaya).&lt;/p&gt;

&lt;p&gt;Quizás los ejemplos que he puesto sean un pelín extremos, pero seguramente alguna de las cosas relatadas os resulten algo familiares. A mi parecer, en ninguna situación, una persona uniéndose a una empresa debe quedarse con la sensación tras un primer día de que no le han hecho apenas caso o de que se ha quedado con un montón de dudas que no sabe cuando va a poder resolver.&lt;/p&gt;

&lt;h2 id=&quot;cómo-debería-ser-un-onboarding&quot;&gt;Cómo debería ser un onboarding&lt;/h2&gt;

&lt;p&gt;En esta sección voy a detallar el que, en mi opinión, sería un proceso de onboarding ideal. Está bastante basado en el que viví en mi actual empresa, y quizás no se pueda aplicar en todos los casos, pero puede ser un buen punto de partida.&lt;/p&gt;

&lt;p&gt;Una semana antes de la fecha de inicio recibimos una correo escrito y firmado por nuestro futuro manager. En este correo se nos da la bienvenida, se describe de forma breve cómo será nuestro primer día, y se especifica a qué hora debemos estar en la oficina, confirmando que debemos preguntar por él (o ella).&lt;/p&gt;

&lt;p&gt;Al llegar el primer día, nuestro nuevo manager nos recibe y tenemos nuestra primera reunión “one to one”, donde pasamos revista a temas como la misión de la empresa, las expectativas que tienen de mí, etc. En este primer contacto sería ideal dar al nuevo empleado un “Welcome pack”, conteniendo una carta de bienvenida, reincidiendo en los aspectos que se hayan podido cubrir en esta primera reunión con mi manager, etc. Si este pack contiene algún detalle a modo de regalo mejor que mejor, este tipo de tonterías se agradecen de veras en un día algo tenso como es siempre el primer día en una nueva empresa.&lt;/p&gt;

&lt;p&gt;Se nos proporciona un check list, detallando cosas que deberemos ir aprendiendo durante nuestra primera fase en la empresa. Aquí entran tanto tareas administrativas (solicitar vacaciones, cómo reportar a la empresa si un día estamos enfermos…), cosas como configurar la firma de correo, nuestro equipo de trabajo, burocracia que siempre tenemos que hacer al principio (enviar algún formulario para darnos de alta en el seguro médico, por ejemplo), etc. Cada uno de estos puntos tendrá un enlace detallado con los pasos a seguir, y una persona de referencia a la que contactar en caso de duda (nuestro manager u otra persona diferente). Este checklist estará dividido por períodos temporales, hay cosas que deben hacerse el primer día, para otras tendremos la primera semana completa, etc.&lt;/p&gt;

&lt;p&gt;Tras la reunión con nuestro manager nos indicarán donde sentarnos, y nos presentarán a nuestros compañeros de mesa, que dependiendo de las circunstancias serán nuestros futuros compañeros de equipo o no. El resto del primer día lo ponemos ocupar perfectamente en ejecutar el checklist. A la hora de la comida, sería ideal que nuestro manager nos ofreciera acompañarnos para explicarnos un poco las opciones que existen por la zona, explicarnos cómo funciona el área común si existe, etc. Esta primera comida es una buena forma de romper el hielo con la gente de la oficina.&lt;/p&gt;

&lt;p&gt;En nuestro segundo día es posible que tengamos que unirnos a un equipo de trabajo o no. En el primer caso, la persona que lidere el equipo debería introducirnos a nuestros nuevos compañeros (siempre que eso no haya ocurrido ya) y programar una reunión de unas 2-3 horas para familiarizarnos con los aspectos que necesitemos para poder ser productivos en el proyecto a la mayor brevedad (tanto a nivel técnico como metodológico). Este tipo de sesiones suelen ser bastante intensas, y siempre me parece adecuado dejar a la persona sola durante unas horas por la tarde para que repase y asimile conceptos por su cuenta. De esta forma, al día siguiente podríamos tener una nueva sesión para aclarar cualquier duda que haya podido surgir. Debemos tener en cuenta también que nuestro nuevo compañero puede necesitar algún tiempo extra para seguir revisando el checklist que le proporcionamos en el primer día.&lt;/p&gt;

&lt;p&gt;En el tercer día, aparte de aclarar dudas, sería en mi opinión el momento ideal para comenzar a trabajar en nuestro nuevo proyecto. La mejor forma de suaviar la curva de aprendizaje, y lo tengo 100% claro, es hacer &lt;a href=&quot;/2016/08/pair-programming/&quot;&gt;Pair Programming&lt;/a&gt;. Incluso si en nuestra empresa no programamos en parejas de forma habitual (cosa que habría que replanterase, pero esa es otra historia :)), esta práctica es ideal para introducir nuevos miembros en el equipo de forma rápida y eficiente. El número de días que necesitemos hacerlo dependerá de cada caso, pero podría estar en torno a una semana. Si durante el proceso de selección no se comunicó claramente que el Pair Programming se va a llevar a cabo es posible que el nuevo desarrollador pueda sentirse algo incómodo, y en tal caso, lo ideal es dejarle tiempo solo entre sesiones de pairing. Lo ideal, en mi opinión, sería sin embargo utilizar esta práctica en más de una situación y dejarlo claro en la oferta inicial, para que los candidatos conozcan de antemano estas condiciones.&lt;/p&gt;

&lt;p&gt;Al final de la primera semana tendremos una nueva reunión con nuestro manager, reunión en la que repasaremos la semana que termina, discutiremos cualquier problema o duda que haya podido surgir, daremos feedback sobre cómo nos estamos sintiendo en estos primeros días, etc. Es importante alentar a nuestros nuevos compañeros a que sean totalmente transparentes y mencionen cualquier cosa que les preocupe desde el momento cero, para así poder solucionar los problemas rápidamente.&lt;/p&gt;

&lt;p&gt;Lo que ocurra en sucesivas semanas dependerá de la empresa, pero es muy importante que la figura del manager esté siempre visible y nos haga sentir acogidos.&lt;/p&gt;

&lt;h4 id=&quot;y-si-no-hay-proyecto&quot;&gt;¿Y si no hay proyecto?&lt;/h4&gt;

&lt;p&gt;En el caso de que no haya proyecto al que unirnos en nuestra primera semana (cosa que puede ocurrir en consultoría), la empresa debería tener siempre a mano algún tipo de plan B, para que un nuevo empleado se sienta útil lo más pronto posible. Este plan B puede consistir en cosas como colaboraciones en proyectos Open Source, proyectos internos, tener alguna biblioteca de cursos prácticos que podamos realizar para aprender alguna tecnología nueva, etc.&lt;/p&gt;

&lt;p&gt;Tengo la impresión de que he escrito un post lleno de obviedades, pero han sido tantas las veces que he experimentado un proceso de onboarding frustrante que consideré interesante escribir sobre esto. Puede que en la práctica haya compromisos que impidan la implementación de un proceso adecuado tan bien como nos gustaría, pero a mi parecer, cuando nuevos empleados entran en nuestra empresa, ellos deberían ser el compromiso número uno y deberíamos despriorizar todos los demás.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cómo escribir un CV para el mercado IT anglosajón</title>
   <link href="http://www.raulavila.com/2017/08/cv-it-anglosajon/"/>
   <updated>2017-08-23T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/08/cv-it-anglosajon</id>
   <content type="html">&lt;p&gt;Hace más de dos años escribí un post sobre los pasos que tomé para &lt;a href=&quot;/2015/04/trabajo-londres/&quot;&gt;buscar trabajo como informático en Londres&lt;/a&gt;. Ese post ha resultado ser el más popular de mi blog con diferencia, y a partir de él he sido contactado varias veces solicitando información adicional, preguntando dudas, etc.&lt;/p&gt;

&lt;p&gt;Recientemente un lector me escribió con la intención de recibir feedback sobre su CV, lo que me dio la idea de plasmar en un post los consejos que habría podido darle a él personalmente, para así poder ayudar a más personas.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Aclaro que casi todo lo que escribiré a continuación no es más que mi opinión, basada en todas las investigaciones que en su día hice para redactar un CV orientado al mercado anglosajón en Europa. Me refiero, por tanto, al Reino Unido, aunque creo que Irlanda también podría entrar en el mismo saco. No sé si lo mismo sería válido en otros países como Alemania o Francia, por ejemplo.&lt;/p&gt;

&lt;p&gt;Puntualización: &lt;a href=&quot;http://raulavila.com/public/CV_Raul_Avila.pdf&quot;&gt;la versión de mi CV actual&lt;/a&gt; está un poco sucia, porque no me encuentro buscando trabajo y no cumple varios de los puntos que digo aquí, así que cogedla con pinzas. Pero creo que sigue siendo útil ponerla para ejemplo de algunas cosas concretas.&lt;/p&gt;

&lt;h3 id=&quot;formato&quot;&gt;Formato&lt;/h3&gt;

&lt;p&gt;El formato a utilizar deber ser PDF, por un sencillo motivo: si utilizas Word u otro similar, los recruiters se podrán tomar la libertad de editar alegremente el currículum, cosa que supongo no os interesa (en PDF también es posible, pero más complicado). Si en algún caso os piden el CV en formato Word, y el puesto es muy atractivo, quizás convenga acceder a ello, pero no se me ocurre un motivo honesto detrás, la verdad.&lt;/p&gt;

&lt;p&gt;Como ya comenté en mi post sobre Londres, el mercado de recruiters es una jungla, y cuanto menos manga ancha les demos, mejor.&lt;/p&gt;

&lt;h3 id=&quot;foto-y-fecha-de-nacimiento&quot;&gt;Foto y fecha de nacimiento&lt;/h3&gt;

&lt;p&gt;Estos detalles &lt;strong&gt;no deben&lt;/strong&gt; aparecer en el CV. Quizás me equivoco, pero en UK un recruiter o empresa descartará automáticamente tu candidatura si esos detalles aparecen en el CV. Hay motivos legales para esto, y es que si aparecen la fecha de nacimiento o la foto se abre la veda a discriminación por motivos de imagen o edad, cosa que jamás debería ocurrir durante un proceso de selección, ¿verdad?&lt;/p&gt;

&lt;h3 id=&quot;diseño&quot;&gt;Diseño&lt;/h3&gt;

&lt;p&gt;Esto es una opinión personal, pero no somos diseñadores gráficos, y creo que un CV cuanto más sobrio en su diseño, mejor. &lt;a href=&quot;http://raulavila.com/public/CV_Raul_Avila.pdf&quot;&gt;El mío&lt;/a&gt; es bastante simple, como podéis ver, aunque su tiempo me llevó. No digo que si preferís algo más llamativo esté mal, de todas formas.&lt;/p&gt;

&lt;h3 id=&quot;longitud&quot;&gt;Longitud&lt;/h3&gt;

&lt;p&gt;Dependiendo de la experiencia, la máxima longitud debe estar entre dos y tres páginas. Si tenéis poca experiencia, haced todo lo posible para dejarlo en una. Entiendo que a partir de ciertos años / número de empresas, puede ser un desafío concentrarlo todo en dos páginas, pero creedme que merece la pena el esfuerzo. Los recruiters no suelen pasar de la primera página en un primer filtro, no hablemos de la segunda. Si hay tercera página debería contener datos de poca importancia, como empresas donde trabajamos hace tiempo, por ejemplo.&lt;/p&gt;

&lt;p&gt;Lo que sí es muy importante es dejar la información más destacada en la primera página: nombre, perfil, datos de contacto, habilidades técnicas, y si es posible debería aparecer vuestra última experiencia (nombre de empresa y puesto). Esto último fui incapaz de cumplirlo en mi CV, pero es aconsejable. Profundizemos en las diferentes secciones a incluir.&lt;/p&gt;

&lt;h3 id=&quot;secciones&quot;&gt;Secciones&lt;/h3&gt;

&lt;p&gt;Por supuesto, el encabezado debe contener vuestro nombre en grande, correo y teléfono. Yo no crearía una sección específica para esto, todo el mundo sabe diferenciar qué es cada cosa. Si os gusta definiros con un título específico (por ejemplo, Software Engineer, Senior Java Developer…), podéis ponerlo en pequeño debajo de vuestro nombre. Aunque personalmente prefiero poner esto como comienzo de la primera sección. Veamos cuáles son las secciones que recomiendo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Profile&lt;/strong&gt;: breve descripción, en un párrafo, de quienes sois, con qué título os gusto definiros, cuál es vuestro perfil, etc. Deber ser muy concisa. Os pongo la descripción que yo utilicé la última vez que busqué trabajo como ejemplo (no creo que sea especialmente brillante, por otro lado):
    &lt;blockquote&gt;
      &lt;p&gt;Senior Java Software Engineer specialized in back-end developments, with a strong focus on quality, use of patterns and, in general, improving the processes and practices of the teams where I’m involved. Having an extensive experience (10+ years), my goal is not just delivering working software but consolidating solid architectures and optimizing the maintainability of the final result.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Core Strenghts&lt;/strong&gt; (opcional): cuatro o cinco puntos, no especialmente técnicos, en los que creáis que destacáis. Esta sección, en mi opinión, es un poco basura, da pie a muchos tópicos, pero a las empresas les encanta. Una puntualización aquí: por favor, no pongáis “Attention to detail”. Diría que podéis omitir esta sección sin ningún problema si no os llama especialmente la atención.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Technical Skills&lt;/strong&gt;: quizás sea esta la sección más complicada de todas. A nada que vayamos teniendo experiencia, el número de tecnologías, frameworks y herramientas que conoceremos crecerá exponecialmente. Seguramente nos sea imposible poner todo lo que sabemos aquí, y a una empresa de bien no debería importarle demasiado que no hayamos trabajado con MongoDB, por ejemplo. Pero si buscáis vuestro primer trabajo fuera de España, vuestra situación será que tendréis que pasar un primer filtro más complicado por parte de recruiters, y estos se dedican mucho a filtrar CVs haciendo búsquedas por palabras. Esto significa que os podéis quedar fuera de un proceso si omitís algo que conocéis y una empresa lo pide.&lt;/p&gt;

    &lt;p&gt;Es importante organizar esta sección en subsecciones, para que no parezca un conglomerado de siglas. Yo, tras darle muchas vueltas, y siendo principalmente un Java Backend Developer, dividí esta parte en: Java Ecosystem, Software Architecture, Data Processing (bases de datos, formatos y demás) y Miscellaneous (aquí tienen cabida todo tipo de herramientas, desde IDEs, control de versiones, gestión de proyectos, también metoodologías, etc).&lt;/p&gt;

    &lt;p&gt;La verdad es que revisando mi CV ahora, quitaría algunas cosas para hacer la sección más ligera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Work Experience&lt;/strong&gt;: ordenados del más reciente al más antiguo, tenemos que listar nuestros trabajos y describir qué hicimos en ellos. A mí me gusta utilizar una sola línea como encabezado para cada entrada, conteniendo “[Fecha]: [Puesto] at [Empresa]”, por ejemplo “2014 to 2016: Software Developer at Pepito SL”, porque a más líneas más espacio que nos quitamos para otras cosas. Debajo del título de cada puesto conviene añadir una breve descripción sobre la empresa: si era una startup, una consultoría, etc. Y a continuación, añadid una lista de puntos describiendo el puesto. Los británicos están enamorados de lo que ellos llaman “achievements”, esto es, cosas muy objetivas que logramos durante nuestra estancia en la empresa, el problema es que en nuestro trabajo es complicado encontrar cosas “cuantificables”, algo que un comercial, por ejemplo, tiene más fácil. No obstante, siempre podemos hablar del éxito de una aplicación que salió a producción, por ejemplo, de cómo mejoramos la suite de tests en un proyecto, o de cómo cambiamos la forma de trabajar en un equipo para que adoptaran Agile (ehem), de cómo fuimos ascendidos tras un tiempo, etc. Por supuesto conviene describir los proyectos en los que estuvimos, pero sin entrar en demasiado detalle de cada uno. A mí me gusta generalizar bastante aquí.&lt;/p&gt;

    &lt;p&gt;No conviene entrar demasiado en detalle acerca de las tecnologías que utilizamos en cada empresa. Ya añadimos previamente una sección de Technical Skills, por lo que lo veo redundante. Aunque siempre podemos mencionar por encima las dos o tres más importantes de cada sitio.&lt;/p&gt;

    &lt;p&gt;Si hemos estado en varias compañías, y nuestra experiencia es ya dilatada, no tiene mucho sentido dar tanto detalle de las primeras. Para esto yo utilizo una sección adicional, &lt;strong&gt;Early Career&lt;/strong&gt;, donde en un par de líneas describo por encima en qué empresas estuve y qué rol.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Contributions to Community&lt;/strong&gt; (opcional): si tenéis un blog, un perfil de GitHub, dais charlas, organizáis un meetup, tenéis un podcast…debería ir aquí.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Education&lt;/strong&gt;: si tenéis un título universitario indicadlo en esta sección. No la pongo casi al final del CV porque sí, las empresas van a valorar muy muy poco esto, y aunque no vamos a omitirlo, no debemos darle más importancia de la que tiene, poniéndolo justo debajo del nombre en el encabezado, por ejemplo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Certifications and Additional Courses&lt;/strong&gt;: bastante obvio esto, al nivel de Education en cuanto a importancia, aunque en ocasiones puede ser más valorado, si recientemente os habéis sacado la certificación de Coursera en Scala, por ejemplo. Además demuestra inquietud si se ve que periódicamente váis estudiando nuevas cosas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Additional Information&lt;/strong&gt; (opcional): aquí podéis poner lo que queráis, si os gusta la música, el Kickboxing, hacer senderismo. Si por culpa de esta sección os toca añadir otra hoja, me la ahorraría. Quizás convenga añadir aquí que actualmente residís en España, para que quede claro que tendréis que viajar para entrevistas. Una vez viváis fuera y busquéis en la misma ciudad no es necesario dar ningún detalle sobre nuestra residencia.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;puntualizaciones&quot;&gt;Puntualizaciones&lt;/h3&gt;

&lt;p&gt;Repito que este post está basado en mi experiencia, y para nada digo que sea un canon ni nada parecido, es sólo lo que me ha funcionado a mí. Internet está lleno de recursos que profundizan en este tema, hay incluso cursos, y hasta empresas que por un “módico” precio (unas 300 libras) te lo preparan ellas. Yo nunca haría algo así, pero la opción existe.&lt;/p&gt;

&lt;p&gt;Os habréis fijado que en ningún momento añado mi dirección, u otras cosas que suelen ponerse en los CV en España, como puede ser el hecho de tener carnet de conducir. Son detalles que ocupan espacio y no aportan nada. Tampoco es necesario que indiquéis si tenéis un nivel de inglés B2, C1, o lo que sea. Las empresas sólo están interesadas en que os comuniquéis de forma razonable, y eso lo va a detectar el recruiter en un minuto de conversación telefónica cuando os llame la primera vez.&lt;/p&gt;

&lt;p&gt;Un último consejo: pillad un número de teléfono exclusivo para la búsqueda de empleo. Existen tantas agencias de recruiters a la caza de candidatos y currículums, que, una vez registren vuestro número en su base de datos, os llamarán una y otra vez hasta la eternidad. Y es bastante coñazo, la verdad.&lt;/p&gt;

&lt;p&gt;Espero que este post os sirva de ayuda si estáis considerando dar el salto desde España. Es cierto que ahora mismo, con el tema Brexit, puede haber más reticencias, pero yo soy muy optimista al respecto en nuestro sector. Seguramente UK quede algo afectado a medio plazo, pero creo que IT seguirá tan vivo como siempre. Y sinceramente, la experiencia merece mucho la pena.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mis etapas con el refactoring</title>
   <link href="http://www.raulavila.com/2017/07/etapas-refactoring/"/>
   <updated>2017-07-23T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/07/etapas-refactoring</id>
   <content type="html">&lt;p&gt;Mi relación con el refactoring viene de lejos, de hecho entre los primeros posts que publiqué se encontraba &lt;a href=&quot;/2015/02/fowler-refactoring-1/&quot;&gt;una serie de tres&lt;/a&gt; donde analizaba de forma algo crítica el libro “Refactoring” de Fowler, y que seguramente hoy día escribiría de forma diferente.&lt;/p&gt;

&lt;p&gt;Al cabo de los años he llegado a definirme a mí mismo, medio en coña medio en serio, como un “yonki del refactoring”. En efecto, refactorizar código y dejarlo apañado es una de las tareas que más disfruto en mi día a día como desarrollador, tanto que hubo un momento determinado en que quizás hasta llegué a pasarme.&lt;/p&gt;

&lt;p&gt;En este post voy a describir cada una de las etapas que he atravesado en mi relación con el refactoring. Supongo que muchos de vosotros os veréis reflejados en algunas de ellas.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;desconocimiento-total&quot;&gt;Desconocimiento total&lt;/h2&gt;

&lt;p&gt;En la carrera nunca me hablaron de refactoring, y tampoco en mis primeros trabajos. &lt;a href=&quot;/2017/01/yo-fui-un-mal-programador/&quot;&gt;Como tampoco ponía demasiado interés en investigar demasiado por mi cuenta&lt;/a&gt;, para mí este concepto no existió durante varios años. De forma que al principio de mi carrera profesional yo me dedicaba a tirar y tirar código como mejor sabía, y “con mucho cuidadito” para no romper nada de lo que habían dejado los anteriores programadores. Porque de tests automatizados de momento ni hablemos, claro.&lt;/p&gt;

&lt;h2 id=&quot;reingeniería&quot;&gt;Reingeniería&lt;/h2&gt;

&lt;p&gt;La primera vez que escuché este palabro en uno de mis primeros proyectos no sabía muy bien lo que significaba. Resulta que en un proyecto en el que estaba trabajando llegamos a tener un módulo contenido en un único fichero fuente con más de 30.000 líneas (cágate lorito). Sumemos a esto que no existía un control de versiones en condiciones y todos los programadores teníamos que acceder a los mismos ficheros ubicados en el servidor de desarrollo. Pensad detenidamente lo que esto significa…en efecto, era necesario bloquear el fichero (lo abríamos con Vim) para que si otro venía después viera que alguien estaba editando y se abstuviera. Si el cambio era urgente tenías que preguntar en persona si el que lo tenía pillado podía liberarlo…una fiesta vamos.&lt;/p&gt;

&lt;p&gt;Total, que un día, nuestro jefe de proyecto decidió coger el toro por los cuernos y decretar que era necesario hacer una “reingeniería” de este módulo, con el único motivo de aumentar la productividad de los desarrolladores al evitar estos bloqueos que comentaba. Vamos, que el motivo de fondo no fue mejorar la calidad ni nada parecido, sino evitar que se produjera una situación que cada vez era más incómoda. Esta labor fue encomendada a uno de los líderes de equipo del proyecto, porque por supuesto los programadores junior debíamos dedicarnos exclusivamente a transcribir los diseños que nos pasaba el analista.&lt;/p&gt;

&lt;p&gt;Diría que esta “reingenría” fue la primera vez que viví de cerca un proceso de refactoring, porque a fin de cuentas se trataba de eso. La productividad del equipo mejoró bastante cuando David, nuestro jefe de equipo, terminó su labor, dividiendo este módulo monstruoso en varios submódulos, y diría que la sostenibilidad del código también, aunque no fuera ese el objetivo inicial.&lt;/p&gt;

&lt;p&gt;No obstante, a pesar de vivir los beneficios del refactoring de primera mano, no investigué mucho más allá, de momento.&lt;/p&gt;

&lt;h2 id=&quot;liderando-mi-propia-reingeniería&quot;&gt;Liderando mi propia reingeniería&lt;/h2&gt;

&lt;p&gt;Pasaron los años, y me encontraba trabajando en una pequeña empresa donde yo era el responsable único de una aplicación web, bastante crítica por otra parte. La aplicación fue creciendo y creciendo hasta llegar a un punto parecido al sistema que comentaba en la etapa anterior (¿pero es que no aprendía nada?), con clases de 10.000 líneas, código dupicado por doquier, y cosas así.&lt;/p&gt;

&lt;p&gt;Así que llegó un momento en que no era posible continuar de forma sostenible (o lo que yo creía que era sostenible) sin hacer una “reingeniería”, y se lo propuse a mi jefe, quien aceptó. Me llevó cosa de dos meses reestructurar el diseño, y recuerdo perfectamente como tenía que probar el sistema completo de forma manual tras cada cambio importante…Otra cosa que recuerdo es que desconocía todas las funcionalidades que ofrecen los IDEs para llevar a cabo este tipo de tareas automáticamente…En fin, es lo que había. Como ya he comentado varias veces con anterioridad, si os encontráis en las primeras fases de vuestra carrera buscad a toda costa un mentor que os guíe y os evite meteros en este tipo de pozos de los que cuesta mucho salir.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-tímido&quot;&gt;Refactoring tímido&lt;/h2&gt;

&lt;p&gt;En un momento determinado me di cuenta de que estaba llegando a un punto muerto en mi carrera, y por fin decidí hacer todas las cosas que no había hecho anteriormente, empezando por leer &lt;a href=&quot;https://www.amazon.es/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1&quot;&gt;Clean Code&lt;/a&gt;, aprender algo de testing (poquito de momento), etc. De repente empecé a ver que el código que anteriormente escribía y me parecía bastante decente, era más bien una birria, y tenía mucho que mejorar.&lt;/p&gt;

&lt;p&gt;Así que comencé a dar la importancia que se merecen los nombres de las cosas (variables, métodos, clases…), el tamaño de nuestros métodos…por entonces no tenía muy claros los &lt;a href=&quot;https://es.wikipedia.org/wiki/SOLID&quot;&gt;principios SOLID&lt;/a&gt;, pero algo iba mejorando. Tampoco me atrevía a refactorizar (sí, por fin sabía que refactoring era una palabra que existía) con demasiada agresividad por miedo a romper cosas que hubieran hecho otros, y es que aún no podíamos sacar pecho de nuestra suite de tests en el proyecto en que estaba trabajando entonces.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-constante-e-irresponsable&quot;&gt;Refactoring constante (e irresponsable)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/2015/04/trabajo-londres/&quot;&gt;Me mudé a Londres&lt;/a&gt;, y en mi primer trabajo encontré un compañero obsesionado con la calidad, el &lt;a href=&quot;https://es.wikipedia.org/wiki/Principio_de_responsabilidad_%C3%BAnica&quot;&gt;Single Responsibility Principle&lt;/a&gt; (sobre todo), el clean code…Yo por mi cuenta me estaba leyendo el libro &lt;a href=&quot;https://www.amazon.es/Refactoring-Improving-Design-Existing-Technology/dp/0201485672/ref=sr_1_1&quot;&gt;Refactoring&lt;/a&gt; de Fowler, y si a todo esto sumamos que iniciamos un proyecto desde cero con tests en condiciones, &lt;a href=&quot;/2015/01/entornos-integrados-desarrollo/&quot;&gt;que aprendí a utilizar los IDEs como dios manda&lt;/a&gt;… el tema del refactoring se me subió a la cabeza, y no podía parar de refactorizar código por allá donde pasaba. ¿Por qué no hacerlo? Era increíblemente divertido, los tests me garantizaban que no rompía nada…en lo que no pensé con detenimiento fue en el coste que todo esto conllevaba a mi empresa.&lt;/p&gt;

&lt;h2 id=&quot;tdd&quot;&gt;TDD&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/2015/08/primera-experiencia-tdd/&quot;&gt;Cuando conocí el TDD&lt;/a&gt;, y lo practiqué de verdad, mi relación con el refactoring empezó a cambiar, e intentaba aplicarlo cuando le llegaba el turno dentro del ciclo Red / Green / Refactor, y si de verdad el diseño del código / sistema lo necesitaba. Ya no refactorizaba cada vez que ponía las manos sobre un nuevo proyecto como si me fuera la vida en ello, entre otras cosas porque comencé a entender que como profesionales debemos aportar un valor a nuestra empresa a cambio del dinero que ella invierte en nosotros, y en muchas ocasiones refactorizar como fin en sí mismo no está aportando tal valor. A fin de cuentas, no estamos añadiendo ninguna funcionalidad nueva, y el cuento de que el sistema será más mantenible en el futuro puede sonar a buena excusa, aunque se cae sola si pensamos en la frecuencia con que ese evento ocurrirá.&lt;/p&gt;

&lt;p&gt;Una vez leí que las personas nos preocupamos en un alto porcentaje de ocasiones (que creo recordar rondaba el 80%) por cosas que nunca ocurren. Pues bien, exactamente lo mismo puede ocurrir con los refactorings si se hacen de forma irresponsable, con la consecuencia además de que nos hacen perder dinero.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-responsable&quot;&gt;Refactoring responsable&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://naildrivin5.com/blog/2013/08/08/responsible-refactoring.html&quot;&gt;Este artículo de David Bryant Copeland&lt;/a&gt; (autor del excelente libro &lt;a href=&quot;/2017/02/senior-software-engineer-book/&quot;&gt;“The Senior Software Engineer”&lt;/a&gt;) confirmó del todo las dudas que iba teniendo acerca de la conveniencia del “refactoring por el refactoring”. No voy a repetir en este post casi nada de lo que cuenta el artículo, &lt;a href=&quot;http://naildrivin5.com/blog/2013/08/08/responsible-refactoring.html&quot;&gt;de obligada lectura&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En resumen, lo que viene a decir es que dentro del ciclo TDD, cuando estamos desarrollando un nuevo sistema, el refactoring es perfecto, pero que cuando nos toca mantener un sistema que está en producción, hay que pensárselo dos veces, ya que podemos incurrir en bugs que no harán sino aumentar el coste de una tarea que hemos realizado y nadie nos ha pedido, por mucho que nos guste.&lt;/p&gt;

&lt;p&gt;¡Ojo!, ni el artículo ni yo decimos que no haya que refactorizar, tan sólo que hay que hacerlo únicamente cuando sea la mejor forma de alcanzar un fin determinado, como puede ser arreglar un bug, añadir una nueva funcionalidad a un código extremadamente rígido, etc.&lt;/p&gt;

&lt;p&gt;Como ejemplo de esto último, recientemente me encontré en un proyecto una historia de usuario que requería invertir el orden en que dos pasos de negocio se estaban realizando. Resulta que esos pasos estaban distribuidos en clases diferentes, con una herencia compleja, varios &lt;a href=&quot;/2015/07/acoplamiento-temporal/&quot;&gt;acoplamientos temporales&lt;/a&gt;…y el cambio no era para nada trivial. Decidí (más bien decidí junto a la persona con quien hacía pairing) que llevar a cabo un refactoring responsable, eliminando jerarquías innecesarias, &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;favorenciendo composición sobre herencia&lt;/a&gt;, etc, era la mejor forma de preparar el código para el cambio. Tomada esta decisión, tras un día de trabajo (y con una buena suite de tests dándonos feedback de nuestros cambios, por supuesto), los pasos que había que intercambiar en nuestro código quedaron tal que así:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stepA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stepB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ya os podéis imaginar lo fácil que fue hacer que &lt;code class=&quot;highlighter-rouge&quot;&gt;stepB()&lt;/code&gt; ocurriera antes que &lt;code class=&quot;highlighter-rouge&quot;&gt;stepA&lt;/code&gt; con esta nueva versión del código.&lt;/p&gt;

&lt;p&gt;Desconozco si en el futuro entraré en una nueva etapa dentro mi particular relación con el refactoring, pero de momento me encuentro en esta última :). Y vosotros, ¿qué opináis? ¿Habéis tenido experiencias similares?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>¿Qué es un Programador Ágil?</title>
   <link href="http://www.raulavila.com/2017/05/programadores-agiles/"/>
   <updated>2017-05-24T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/05/programadores-agiles</id>
   <content type="html">&lt;p&gt;Supongo que a nadie le pillará por sorpresa si afirmo que el desarrollo Agile está en boca de toda las empresas hoy día. Incluso el tema se está llevando a otra dimensión con el deslumbrante nombre de “Transformación Digital”. Por tanto, no creo que sea necesario explicar en este post qué es el desarrollo ágil.&lt;/p&gt;

&lt;p&gt;El asunto ha llegado al nivel de que no es difícil encontrar ofertas donde se buscan “Agile Developers”, y aquí es donde el asunto empieza a cobrar tintes algo cómicos. Personalmente, no creo que casi ninguna empresa que publica una oferta con ese título tenga mucha idea de las skills que diferencian a un programador ágil de uno que no lo sea, y si lo afirmo con tanta rotundidad es porque nunca he visto mención alguna a las que yo creo son las habilidades principales que todo desarrollador ágil debe tener.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Fue Kent Beck quien &lt;a href=&quot;https://www.quora.com/If-you-had-to-write-the-Agile-manifesto-again-would-you-change-something-on-it&quot;&gt;en una sesión de preguntas en Quora&lt;/a&gt; comentó que el nombre “Agile” fuera quizás un error cuando un grupo de profesionales acuñaron el termino hace ya casi dos décadas. Lo que ha ocurrido con el tiempo es que las grandes corporaciones han comenzado a confundir “ágil” con “rápido”, por tanto “Programador ágil” pasa a ser entendido como “Programdor rápido”. Es decir, las empresas quieren gente que les entregue una mayor cantidad de trabajo en menos tiempo, pero sin tener bien claras las cualidades que un programador capaz de hacer esto debe tener. Se piensa además, que con seguir las ceremonias de Scrum esta mayor velocidad se alcanzará mágicamente. Un poco absurdo todo.&lt;/p&gt;

&lt;p&gt;En mi opinión, las principales cualidades del desarrollo ágil son el ritmo sostenible y el feedback constante. Para conseguir ambas cosas se necesita mejorar la comunicación, conseguir una máxima visibilidad del trabajo realizado, pero, por encima de todo, alcanzar una excelencia técnica en el proceso de desarrollo del software entregado.&lt;/p&gt;

&lt;p&gt;Es esta excelencia técnica la que consigue, a la larga, incrementar la cantidad de funcionalidades entregadas por unidad de tiempo. En efecto, estoy hablando de abogar por la máxima calidad en lo que hacemos.&lt;/p&gt;

&lt;p&gt;Dicho esto, ¿cuáles son las habilidades que debe tener un buen programador ágil? Pues, desde mi punto de vista, dos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dominio del testing&lt;/li&gt;
  &lt;li&gt;Dominio del &lt;a href=&quot;https://martinfowler.com/books/refactoring.html&quot;&gt;refactoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si un programador es capaz de entregar software perfectamente cubierto y descrito por tests, dicho software carecerá de regresión en el futuro (o tendrá muy poca), por lo que hacer crecer el sistema será mucho más sencillo, sin un decremento notorio en la velocidad. El hecho de tener los tests como “red de seguridad” permitirá además moldear nuestro código mediante el refactoring sin miedo a romper nada. Y es el refactoring constante, la adaptación de nuestro código para hacerlo más legible y mantenible lo que realmente tiene un impacto brutal en la calidad del software entregado.&lt;/p&gt;

&lt;p&gt;¿Es más importante el testing o el refactoring? En realidad ninguna está por encima de otra, porque ambas se necesitan para crear un círculo virtuoso. Quizás os venga a la mente el &lt;a href=&quot;/2016/01/aprendiendo-TDD/&quot;&gt;TDD&lt;/a&gt; como consagración definitiva de este círculo. Y aunque personalmente considero que el TDD es increíblemente útil, en última instancia podría tolerar no utilizarlo siempre y cuando no se pierdan de vista la importancia de los tests y el refactoring en todo momento. Esta, y no otra, es la forma de conseguir el ritmo sostenible que mencionaba más arriba.&lt;/p&gt;

&lt;p&gt;Por tanto, si en el futuro os topáis con una oferta donde se buscan “Agile Developers” pero no se mencionan una de estas dos habilidades, desconfiad :).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lecciones aprendidas tras mi primer proyecto como Anchor</title>
   <link href="http://www.raulavila.com/2017/05/lecciones-aprendidas-anchor/"/>
   <updated>2017-05-06T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/05/lecciones-aprendidas-anchor</id>
   <content type="html">&lt;p&gt;Acabo de terminar mi primera experiencia como Anchor (aka Team Leader). Hacer un buen trabajo en este rol era uno de mis objetivos del año 2017, y creo que lo he conseguido. Quizás no haya sido el mejor proyecto para empezar, por varios factores que no vienen al caso, pero en general estoy muy satisfecho con todo lo hecho y aprendido.&lt;/p&gt;

&lt;p&gt;Me gustaría recoger en este post varias conclusiones que he ido sacando, así como algunas lecciones aprendidas. A lo mejor os parece que no digo más que obviedades. Bien, llevo trabajando muchos años, y muchas de estas cosas no las he visto poner en práctica tanto como podéis pensar.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h3 id=&quot;nunca-confíes-en-tu-memoria-utiliza-trello&quot;&gt;Nunca confíes en tu memoria, utiliza Trello&lt;/h3&gt;

&lt;p&gt;Maldita sea, nunca me había parado a pensar la cantidad de cosas que hay que tener en la cabeza al mismo tiempo a modo de TODOs si no te dedicas 100% al desarrollo. A la semana de unirme al proyecto me dí cuenta de la necesidad de utiliar una herramienta en condiciones para recoger y hacer tracking de todas estas acciones. &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt; viene que ni pintado, funciona genial, y hay versiones para todas las plataformas.&lt;/p&gt;

&lt;h3 id=&quot;no-llegues-tarde-a-la-standup&quot;&gt;No llegues tarde a la standup&lt;/h3&gt;

&lt;p&gt;Lo más normal en nuestros días es arrancar la jornada con la típica standup, y creo que es muy perjudicial para el equipo si el anchor no llega a tiempo, o directamente ni aparece.  A no ser que haya un motivo de peso detrás, por supuesto (hijos, percances en el transporte, etc), no es mi intención aquí iniciar un debate en torno a la flexibilidad horaria o conciliación familiar. En algunos casos quizás tener la standup a primera hora no sea la mejor opción, y pueda moverse un poco más tarde.&lt;/p&gt;

&lt;p&gt;Personalmente además, he encontrado muy útil llegar algo pronto a la oficina para planificar un poco el día, antes de que empezara la vorágine, pero esto ya es una preferencia personal.&lt;/p&gt;

&lt;h3 id=&quot;da-los-buenos-días&quot;&gt;Da los buenos días&lt;/h3&gt;

&lt;p&gt;Empieza la standup dando los buenos días a todo el equipo. Algo tan tonto sirve para dar un empujón de moral a tus compañeros, normalmente algo dormidos en ese momento.&lt;/p&gt;

&lt;h3 id=&quot;pide-las-cosas-por-favor&quot;&gt;Pide las cosas por favor&lt;/h3&gt;

&lt;p&gt;Solicita las cosas con amabilidad, evita meter prisas, y en caso de que lo que pidas sea relativamente urgente comunica el motivo de la urgencia. Nunca digas algo como “necesito esto para YA”.&lt;/p&gt;

&lt;h3 id=&quot;da-las-gracias&quot;&gt;Da las gracias&lt;/h3&gt;

&lt;p&gt;Siempre que pidas algo a alguien, o siempre que alguien se acerque a tí para comentarte algo que ha hecho o alguna idea que ha tenido, dale las gracias para terminar la conversación. O mejor aún, da las gracias y pronuncia su nombre detrás.&lt;/p&gt;

&lt;h3 id=&quot;sé-empático&quot;&gt;Sé empático&lt;/h3&gt;

&lt;p&gt;Ten empatía con todo el mundo, intenta ponerte siempre en su piel y entender los motivos de cualquier forma de actuar, por rara que sea. Os recomiendo el libro &lt;a href=&quot;https://www.amazon.es/Comunicación-violenta-Un-lenguaje-vida/dp/987218349X/ref=sr_1_2&quot;&gt;Comunicación No Violenta&lt;/a&gt;, donde se trata este tema en profundidad.&lt;/p&gt;

&lt;h3 id=&quot;utiliza-la-crítica-constructiva&quot;&gt;Utiliza la crítica constructiva&lt;/h3&gt;

&lt;p&gt;Cuando creas que alguien ha hecho algo mal, y digo creas porque quizás seas tú el equivocado, dirígete a él con educación, pregunta los motivos de lo que ha hecho, y expón los motivos por los que piensas que no es correcto. Nunca seas tajante, y trata siempre de llegar a un consenso conjunto. Por nada del mundo intentes imponer tus ideas.&lt;/p&gt;

&lt;h3 id=&quot;para-criticar-horrores-indiscutibles-utiliza-las-retrospectivas&quot;&gt;Para criticar horrores indiscutibles, utiliza las retrospectivas&lt;/h3&gt;

&lt;p&gt;Si ves algo en el código que es un horror sin ningún tipo de discusión, saca el tema a colación en la retrospectiva, pero jamás menciones a la persona que lo ha hecho directamente. De hecho intenta no mirar el autor del commit si es posible, para no saberlo siquiera (he re reconocer que es difícil resistirse a esto último…).&lt;/p&gt;

&lt;p&gt;Estoy hablando de cosas tan horribles como copy-paste coding a lo bestia, no añadir mensajes en los mensajes de commit…repito, horrores clamorosos. Si se habla abiertamente, aunque alguien se dé por aludido, si comentas el problema con empatía nunca debería haber ningún problema, y todo el equipo aprenderá la lección.&lt;/p&gt;

&lt;h3 id=&quot;nunca-culpes-a-nadie&quot;&gt;Nunca culpes a nadie&lt;/h3&gt;

&lt;p&gt;Tanto los éxitos como los errores deben ser responsabilidad del equipo. Nunca, NUNCA, culpes directamente a una persona de cualquier error que haya podido ocurrir.&lt;/p&gt;

&lt;h3 id=&quot;ten-claros-tus-principios-y-valores&quot;&gt;Ten claros tus principios y valores&lt;/h3&gt;

&lt;p&gt;Los que me conocéis o venís siguiendo en el blog sabéis que yo pongo la calidad software como uno de los valores fundamentales que hay que mantener en un proyecto. Nunca abandonaré esa idea, y es necesario actuar siempre en consecuencia, incluso habiendo plazos o presiones de por medio. Siempre, repito, SIEMPRE, una escasa calidad en nuestro código terminará repercutiendo negativamente en el coste del proyecto.&lt;/p&gt;

&lt;p&gt;Nunca abandones tus principios, es la única forma de sentir orgullo del trabajo entregado por el equipo, por encima de las consideraciones que el negocio pueda tener.&lt;/p&gt;

&lt;h3 id=&quot;prepara-las-reuniones&quot;&gt;Prepara las reuniones&lt;/h3&gt;

&lt;p&gt;Dedica un tiempo a preparar las reuniones que convoques o a las que seas convocado. Si surge un tema inesperado no debería haber problema en que te quedes un poco “en bragas”, pero el que sea tema principal de una reunión deberías llevarlo totalmente controlado, y si puede ser, con las dudas que haya que plantear ya preparadas.&lt;/p&gt;

&lt;h3 id=&quot;documenta&quot;&gt;Documenta&lt;/h3&gt;

&lt;p&gt;Sí, documenta, y no utilices como excusa que en Agile no se hace, porque no es verdad. Cualquier proyecto necesita tener un fichero README decente, un diagrama de arquitectura que sirva como punto central de discusión para todo el mundo, etc. No estoy hablando de análisis funcionales (jamás pensé que estas dos palabras aparecerían en mi blog), ni de diseños detallados, sólo de documentación que es necesario tener.&lt;/p&gt;

&lt;h3 id=&quot;humildad&quot;&gt;Humildad&lt;/h3&gt;

&lt;p&gt;La humildad me sigue pareciendo la cualidad número uno que debemos tener en nuestra profesión. El día que la pierda, y espero que no ocurra nunca, me gustaría recibir una colleja a tiempo.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cómo funciona Git (y 4)</title>
   <link href="http://www.raulavila.com/2017/04/como-funciona-git-4/"/>
   <updated>2017-04-30T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/04/como-funciona-git-4</id>
   <content type="html">&lt;p&gt;Tenía pendiente escribir la última parte de esta serie desde hace tiempo. Tras revisar &lt;a href=&quot;/2017/03/como-funciona-git-3/&quot;&gt;cómo Git gestiona merge y rebase&lt;/a&gt;, queda por ver la forma en que Git gestiona la capa de distribución, es decir, el trabajo y sincronización con repositorios remotos.&lt;/p&gt;

&lt;p&gt;Como ya sabemos, Git es un sistema de control distribuido de versiones, donde cada persona no tiene más que una copia completa del repositorio. Es decir, cada usuario que clone un repositorio Git tendrá una copia de la carpeta &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;, carpeta que contiene montones de cosas, según vimos en anteriores posts de la serie.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Normalmente el repositorio que sirve de referencia para todos los usuarios estará alojado en algún sistema como &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/&quot;&gt;BitBucket&lt;/a&gt; o &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;, de forma que cuando queremos empezar a trabajar con un proyecto haremos un &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; de ese repositorio “remoto”. Será con esta versión “de referencia” con la que nosotros sincronizaremos nuestros cambios.&lt;/p&gt;

&lt;p&gt;Internamente, Git almacena cierta información relacionada con este repositorio remoto en el fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;. Veamos, por ejemplo, lo que este fichero contiene para el caso del repositorio donde alojo el código de este blog:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &quot;origin&quot;]
	url = https://github.com/raulavila/blog-source-code.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
	remote = origin
	merge = refs/heads/master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Las dos secciones importantes son las últimas, el &lt;code class=&quot;highlighter-rouge&quot;&gt;core&lt;/code&gt; existirá incluso tras crear un repositorio Git local sin llegar a sincronizarlo con un remoto. Como véis, define ciertas características de donde está alojado &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;, que es el nombre por defecto que Git asocia al repositorio remoto principal (ahora volvemos a esto). También vemos información que mapea nuestra rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; con el repositorio remoto &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Git permite asociar varios repositorios remotos a un repositorio local, &lt;a href=&quot;https://help.github.com/articles/adding-a-remote/&quot;&gt;tal y como está descrito aquí&lt;/a&gt;, aunque no es algo que recomiende especialmente. Cada uno de los remotos deberá tener un alias designado, siendo &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; el primer alias por defecto que utiliza Git.&lt;/p&gt;

&lt;p&gt;Sigamos. Recordemos que los objetos de Git en general, y los commits en particular, son inmutables. Y lo son tanto en local como en remoto, por tanto (y me estoy repitiendo), clonar un repositorio se trae a local una copia de todos estos commits. Lo que no es inmutable en absoluto es una rama (un puntero a un commmit, a fin de cuentas), y aquí es donde entra en juego la capa de distribución de Git.&lt;/p&gt;

&lt;p&gt;En efecto, lo que ocurre en nuestro repositorio local es que Git crea dos copias de la rama en cuestion, una versión local y una remota. Supongamos que estamos trabajando con &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, tras hacer Git clone de un repositorio con una historia en dicha rama, lo que tenemos es:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-1.jpg&quot; alt=&quot;Git Remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es decir, existe una rama llamada &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt;, apuntando al último commit del repositorio remoto, que en este caso es el mismo que tenemos en local. La información de esta rama &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; está contenida en el fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/remotes/origin/master&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cat .git/refs/remotes/origin/master
aa90e471ababde242281c833fffea255f69dd28a

$ git show-ref master
aa90e471ababde242281c833fffea255f69dd28a refs/heads/master
aa90e471ababde242281c833fffea255f69dd28a refs/remotes/origin/master

$ cat .git/HEAD
ref: refs/heads/master

$ cat .git/refs/heads/master
aa90e471ababde242281c833fffea255f69dd28a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;El comando &lt;code class=&quot;highlighter-rouge&quot;&gt;show-ref &amp;lt;rama&amp;gt;&lt;/code&gt; nos muestra información del commit al que apunta la rama en cuestión tanto en local como en remoto. El resto de comandos del ejemplo creo que deberían estar claros a estas alturas si habéis seguido esta serie.&lt;/p&gt;

&lt;h2 id=&quot;sincronizando-con-el-repositorio-remoto&quot;&gt;Sincronizando con el repositorio remoto&lt;/h2&gt;

&lt;p&gt;Los “problemillas” en Git suelen surgir de vez en cuando a la hora de sincronizar nuestro repositorio local con el remoto. Durante el resto del post vamos a revisar diferentes escenarios.&lt;/p&gt;

&lt;h3 id=&quot;escenario-1&quot;&gt;Escenario 1&lt;/h3&gt;

&lt;p&gt;Ocurre cuando somos los únicos trabajando en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-2.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos en la imagen como hemos añadido un nuevo commit (2), que ha hecho moverse los punteros &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, pero no el puntero &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt;. Esto es así porque en el repositorio remoto, la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; sigue exactamente igual. En este escenario, sincronizar ambos repositorios es tan sencillo como hacer &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;, y nuestro repositorio quedará así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-3.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si cualquier otro usuario trabajando con este repositorio, pero sin haber hecho ningún commit adicional en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, hiciera &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;, Git resolvería la situación fácilmente, desembocando en el mismo diagrama. Los problemillas empiezan a surgir cuando ese segundo usuario sí ha hecho algún que otro commit.&lt;/p&gt;

&lt;h3 id=&quot;escenario-2&quot;&gt;Escenario 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-4.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Espero que el diagrama esté más o menos claro. En este escenario, un segundo usuario ha hecho un commit (3) en su rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; local, y la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; remota ya contiene el commit (2) que el usuario anterior incluyó en su push. Pero, para ese segundo usuario (el que tiene el commit (3)), su puntero &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; no ha cambiado, ya que no hemos sincronizado, de forma que si intentamos hacer &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;, Git detectará que la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; remota no está sincronizada con nuestra rama &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; local, y nos dará un conflicto / error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git push
To github.com:raulavila/dummy.git
 ! [rejected]        master -&amp;gt; master (fetch first)
error: failed to push some refs to 'git@github.com:raulavila/dummy.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ante esta situación podemos optar por la solución bestia, que es invocar el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f&lt;/code&gt; (force push). Con esto estaremos indicando a Git que nuestra rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; es la buena, y que sobrescriba toda la historia de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; en &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; para que coincida con la copia en local. Como os podéis imaginar, esto es muy, muy peligroso. Personalmente, la única situación en la que he encontrado una buena justificación para hacerlo es cuando yo soy la única persona trabajando en una rama diferente de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, pero en la que llevo a cabo rebases de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; con frecuencia. Al hacer rebase reescribo la historia de mi rama, y si hago push a la remota, habrá divergencias todo el tiempo. Pero al ser yo la única persona que trabaja en esa rama, sé con seguridad que no hay problema en forzar un push.&lt;/p&gt;

&lt;p&gt;Una estrategia más segura, es hacerlo en dos pasos:&lt;/p&gt;

&lt;p&gt;1 - Invocar el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git-fetch&lt;/code&gt;, que sincroniza los contenidos de las ramas &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/*&lt;/code&gt; en local, sin llevárselos a las versiones locales. Lo sé, es confuso, pero espero que lo entendáis mejor con el diagrama:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-5.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fijaos en que &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt;, ha pasado del commit (1) al (2), es decir, nuestro Git local ya está al tanto de los nuevos cambios en remoto. Viendo la salida de &lt;code class=&quot;highlighter-rouge&quot;&gt;show-ref&lt;/code&gt;, podemos ver cómo los commits de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; son diferentes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git show-ref master
9232aacf90cd50182e7608b5b051250c97ab109d refs/heads/master
0e0a1c2800d295e25b7766a8b66fc681be3a2f07 refs/remotes/origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2 - Hacer un merge de las ramas &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge origin/master&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-6.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que ahora hemos resuelto el problema, ya que el “merge commit” tiene como padre el último commit en la rama remota &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Por lo que si nadie ha añadido nuevos commmits en dicha rama, ahora sí, podremos hacer &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; sin problemas.&lt;/p&gt;

&lt;p&gt;En realidad, estas dos acciones pueden llevarse a cabo de una, con el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;, que seguro todos conocéis. En su versión por defecto, este comando no hace más que un fetch + merge, de la forma en que hemos visto.&lt;/p&gt;

&lt;p&gt;Si recordáis &lt;a href=&quot;/2017/03/como-funciona-git-3/&quot;&gt;el anterior artículo&lt;/a&gt;, podemos utilizar rebase como alternativa a merge para fusionar ramas. Esto tiene ventajas y desventajas, no olvidéis que vamos a reescribir la historia, pero en el caso de que vayamos añadiendo sucesivos commits en nuestra versión local, antes de hacer push me parece una buena práctica hacer un rebase de la &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; remota en lugar del merge que hemos visto. Así conseguiremos una historia más limpia, sin merge commits innecesarios y sin ramas cruzándose.&lt;/p&gt;

&lt;p&gt;Para conseguir esto, aunque es posible hacer fetch + rebase, la forma rápida es mediante el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt;. En nuestro ejemplo, si hiciéramos esto en lugar de pull sin más, la foto final quedaría así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-7.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Siendo ahora el commit (2) exactamente el mismo que existe en el &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; remoto, y (3) una reescritura llevada a cabo durante la operación de rebase. Para terminar, sería necesario sincronizarlo todo con &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-remotes-8.jpg&quot; alt=&quot;Git remotes&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escenario-3-lo-mismo-pero-con-conflictos&quot;&gt;Escenario 3: lo mismo, pero con conflictos&lt;/h3&gt;

&lt;p&gt;Si surgen conflictos durante las operaciones de merge o rebase, no hay ninguna diferencia entre el proceso que se lleva a cabo para solucionarlos durante una sincronización con el repositorio remoto respecto a lo que ocurre durante una fusión entre ramas. Por tanto, os remito de nuevo a la breve descripción al respecto que aparecía &lt;a href=&quot;/2017/03/como-funciona-git-3/&quot;&gt;en el anterior post de la serie&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Espero que esta seria os haya servido de ayuda para perder el miedo a Git. Personalmente, conocer todos estos detalles sobre el funcionamiento de la herramienta ha conseguido que cuando surge un conflicto no pierda los nervios de forma inmediata, como sí me ocurría antaño :).&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Serie completa:&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/01/como-funciona-git-1/&quot;&gt;Parte 1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/02/como-funciona-git-2/&quot;&gt;Parte 2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/03/como-funciona-git-3/&quot;&gt;Parte 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/04/como-funciona-git-4/&quot;&gt;Parte 4&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>Cómo trabajamos en Pivotal</title>
   <link href="http://www.raulavila.com/2017/04/como-trabajamos-pivotal/"/>
   <updated>2017-04-06T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/04/como-trabajamos-pivotal</id>
   <content type="html">&lt;p&gt;Hace algo más de un año comencé a trabajar en &lt;a href=&quot;https://pivotal.io/&quot;&gt;Pivotal&lt;/a&gt;, una empresa donde no he dejado de aprender desde el día uno. A finales de 2016, tras descubrir la web &lt;a href=&quot;http://www.wedotdd.com/&quot;&gt;We Do TDD&lt;/a&gt; (una gran iniciativa) y unirme al canal de Slack, se me ofreció la posibilidad de ser entrevistado para describir la forma en que trabajamos, cómo utilizamos TDD, etc. Acepté en paralelo al mismo tiempo que un compañero de Berlín (Oleksii, más conocido como &lt;a href=&quot;http://www.tddfellow.com/&quot;&gt;That TDD Fellow&lt;/a&gt;), por lo que decidimos hacer la entrevista conjunta, cosa que, por otra parte, encaja bastante bien con la cultura de nuestra empresa, donde el pair programming es una constante.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wedotdd.com/interviews/companies/22&quot;&gt;La entrevista fue publicada recientemente&lt;/a&gt;, y me he permitido la licencia de publicar un post con la única intención de publicitarla :).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wedotdd.com/interviews/companies/22&quot;&gt;Entrevista en We Do TDD (en inglés)&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>La comunicación en proyectos Software</title>
   <link href="http://www.raulavila.com/2017/04/comunicacion-proyectos-software/"/>
   <updated>2017-04-01T00:00:00+01:00</updated>
   <id>http://www.raulavila.com/2017/04/comunicacion</id>
   <content type="html">&lt;p&gt;Esta semana hará tres meses que inicié mi andadura como Anchor en un proyecto de mi empresa. Diría que la experiencia está siendo muy buena en todos los sentidos, y me está sirviendo para aprender un montón de cosas. Quizás la más importante de todas ellas sea como gestionar la comunicación dentro de un equipo de forma eficiente, y en este post voy a repasar muchas de las conclusiones que he ido sacando en claro.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;comunicación-síncrona&quot;&gt;Comunicación síncrona&lt;/h2&gt;

&lt;p&gt;Comunicación síncrona es aquella en la que el intercambio de mensajes e impresiones ocurre en tiempo real, lo que incluye:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conversaciones directas en persona&lt;/li&gt;
  &lt;li&gt;Conversaciones telefónicas&lt;/li&gt;
  &lt;li&gt;Reuniones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conversaciones-en-persona&quot;&gt;Conversaciones en persona&lt;/h3&gt;

&lt;p&gt;Es, en mi opinión, el canal más importante de comunicación, y el que debe funcionar con mayor fluidez. Me atrevería a afirmar con rotundidad que ninguna forma de comunicación supera al intercambio de impresiones entre dos personas realmente implicadas en la discusión, y es por eso que seguiré defendiendo a capa y espada el &lt;a href=&quot;/2016/08/pair-programming/&quot;&gt;Pair Programming&lt;/a&gt;. Me resulta gracioso pensar ahora que el trabajar con Pair Programming casi el 100% del tiempo me hizo dudar un poco antes de unirme a una empresa que lo practicaba, mientras que en este momento de mi carrera creo que difícilmente aceptaría una oferta de desarrollador para una empresa donde no se practique.&lt;/p&gt;

&lt;p&gt;Fuera del Pair Programming, las conversaciones en persona deben ocurrir siempre que sea necesario, y para ello es fundamental tener al equipo trabajando en el mismo espacio, a poder ser con pizarras compartidas donde se puedan esbozar ideas y diagramas con facilidad. Es importante ser respetuosos con el trabajo de los demás si nos dirigimos a una persona para discutir o preguntar algo, con esto quiero decir que nunca interrumpáis directamente sin antes preguntar con educación “¿Tienes un segundo?” o similar. Si no es el momento adecuado, debemos entenderlo y esperar. La &lt;a href=&quot;https://es.wikipedia.org/wiki/T%C3%A9cnica_Pomodoro&quot;&gt;Técnica Pomodoro&lt;/a&gt; puede ser realmente útil en este punto, de forma que durante un pomodoro no es posible interrumpir lo que alguien esté haciendo.&lt;/p&gt;

&lt;p&gt;También creo que es importante no desviarse demasiado del tema de discusión principal. Ocurre en ocasiones que se empieza tratando un punto A, y en mitad de la conversación saltamos a B, luego a C, y terminamos en F después de una hora. Esta conversaciones no suelen ser excesivamente productivas (¡aunque siempre hay excepciones!), y es importante rectificar el curso si detectamos una pérdida de rumbo excesiva.&lt;/p&gt;

&lt;h3 id=&quot;conversaciones-telefónicas&quot;&gt;Conversaciones telefónicas&lt;/h3&gt;

&lt;p&gt;No me extenderé mucho aquí, ya que el uso del teléfono en mi empresa es CERO. Esto es posible porque siempre presionamos para tener al equipo completo en el mismo espacio (como acabo de mencionar). En cualquier caso, por mi experiencia pasada sí tengo algo que aportar a este punto, y es que se deberían evitar tanto como sea posible las llamadas telefónicas “a puerta fría”, es decir, sin aviso previo, sobre todo si es para tratar un tema más o menos en profundidad (como por ejemplo realizar un seguimiento por parte de un manager que esté en otra oficina). Este tipo de llamadas tienen un impacto muy grande en el trabajo que el receptor de la llamanda pueda estar realizando, y creo que deberían programarse en el calendario de la misma forma que una reunión presencial de seguimiento.&lt;/p&gt;

&lt;p&gt;Otro de los grandes problemas de las conversaciones telefónicas es que son efímeras y no suelen dejar ningún rastro. La memoria humana no es perfecta y es caprichosa, pudiendo crear todo tipo de confusiones.&lt;/p&gt;

&lt;p&gt;El único caso donde creo que se pueden justificar las llamadas telefónicas repentinas es cuando está ocurriendo una incidencia grave que requiere atención inmediata.&lt;/p&gt;

&lt;h3 id=&quot;reuniones&quot;&gt;Reuniones&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/2015/04/reuniones/&quot;&gt;Ya toqué este tema&lt;/a&gt; hace un par de años, pero creo que estoy en posición de añadir nuevas puntualizaciones a lo que entonces dije.&lt;/p&gt;

&lt;p&gt;Siendo franco, yo siempre he detestado las reuiones. Opinaba que en la mayoría de los casos no sirven para gran cosa, pero esa perspectiva ha cambiado ligeramente desde que ya no trabajo en desarrollo el 100% del tiempo. Mi punto de vista en la actualidad es que las reuniones son necesarias &lt;strong&gt;mientras sean productivas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Empezaré con unas puntualizaciones rápidas sobre las reuniones fijas que suelen existir en casi todos los procesos ágiles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stand-up: debería tener lugar a primera hora de la mañana. Quizás no a las 9 en punto, para no forzar una puntualidad excesiva y el consiguiente estrés asociado en las grandes ciudades, pero definitivamente antes de las 10. Esta reunión debe ser &lt;strong&gt;corta&lt;/strong&gt;, así que por favor, evitad dar detalles técnicos innecesarios sobre lo que hicísteis el día anterior, y que dependiendo del tamaño del equipo puede estirar la duración de la stand-up hasta unos 40 minutos (!!!). El principal cometido de la stand-up debería ser compartir a grooso modo el trabajo que estamos haciendo, y lanzar preguntas sobre determinados temas que nos puedan estar bloqueando.&lt;/li&gt;
  &lt;li&gt;Reunión de planificación: en mi empresa las iteraciones son de una semana, y la reunión de planificación dura una hora. Las historias de usuario deberían llegar tan maduradas como sea posible en cuanto a la descripción y los criterios de aceptación, de forma que el equipo pueda puntuar el máximo número posible. En mi experiencia, lleva un tiempo agilizar este proceso.&lt;/li&gt;
  &lt;li&gt;Retrospectivas: dura otra hora, y repasamos las cosas buenas, malas, y reguleras que han ocurrido durante la semana, centrándonos sobre todo en sentimientos (lo cual representamos con tres columnas: cara sonriente, cara triste, y meh). En esta reunión debemos ser tan abiertos y claros como sea posible, y lo más importante de todo, &lt;strong&gt;debemos extraer acciones a tener en cuenta para la siguiente iteración&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todas estas reuniones no deberían llevar más de 3 horas por semana a todo el equipo. El principal problema de muchos proyectos, y donde creo que hay que poner el foco, son las reuniones que caen fuera de este grupo. Intentaré resumir los anti-patrones que, a mi parecer, debemos evitar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Demasiada gente convocada: no, no hace falta que todos los desarrolladores estén presentes en reuniones para discutir temas como las proyecciones de futuras fechas de entrega (el típico roadmap), el descubrimiento de nuevos requisitos, la toma de decisiones con la división de seguridad da empresa, etc. El tiempo que los desarrolladores están, ejem, desarrollando, debería maximizarse tanto como sea posible, y para eso existen roles (llámese Team Leader, Anchor, o lo que sea), cuya labor es proteger al equipo de estas conversaciones.&lt;/li&gt;
  &lt;li&gt;Reuniones sin decisión de acciones asociada: toda reunión debe terminar con acciones a seguir por una o más personas (que puede incluso ser todo el equipo). Estas decisiones deberían quedar reflejadas en algún sitio (JIRA, Pivotal Tracker, Trello), y no sólo en los cuadernos de los asistentes. En ocasiones, dependiendo de la audiencia, es recomendable enviar un correo a modo de resumen con estas acciones.&lt;/li&gt;
  &lt;li&gt;Reuniones de larga duración sin breaks: sinceramente, yo soy incapaz de mantener la atención de manera continuada durante más de 70 minutos. No digo esta cifra al azar, en mi experiencia, a la hora y cuarto no puedo seguir conectado. Los descansos son necesarios, y ni siquiera necesitamos que sean muy largos, 5-10 minutos cada hora, no solo no restan, sino que suman efectividad a la reunión.&lt;/li&gt;
  &lt;li&gt;Reuniones sin preparación previa: nunca debemos ir a una reunión sin preparar por encima el tema que se va a tratar. Sin preparación, alguno de los presentes tendrá mucho más contexto que nosotros, tomará la batuta de la discusión, y la reunión avanzará sin discusión real, puesto que no nos atreveremos a rebatir sus argumentos por miedo a quedar en ridículo.&lt;/li&gt;
  &lt;li&gt;Reuniones con varias personas en remoto: esto no es fácil de evitar en muchas ocasiones, pero el hecho de tener gente en otra localización diferente (presente al teléfono o Skype) dificulta mucho determinadas conversaciones, además de hacer imposible el uso de la pizarra física si fuera necesaria. Repito, un punto difícil de evitar, pero que conviene mencionar.&lt;/li&gt;
  &lt;li&gt;Reuniones que se desvían del tema principal: aspecto que ya comenté en la comunicación entre personas de este mismo artículo, pero que cobra una dimensión incluso mayor en las reuniones. Si nos desvíamos en exceso del tema principal, pueden que gastemos el tiempo de la reunión por completo sin llegar a ningún lado. De ahí la importancia de establecer una agenda clara, y mantener la conversación enfocada.&lt;/li&gt;
  &lt;li&gt;Gente con el portátil / móvil en la sala: aspecto peliagudo de evitar, debido al funcionamiento de muchas empresas. El mayor problema que veo a esto es que, quizás debido a las &lt;a href=&quot;https://es.wikipedia.org/wiki/Neurona_especular&quot;&gt;neuronas espejo&lt;/a&gt;, cuando alguien empieza a interactuar con su ordenador o teléfono, siempre hay gente que va detrás :), lo cual nos lleva a la pregunta de si es realmente necesario que esas personas estén presentes en la reunión.&lt;/li&gt;
  &lt;li&gt;Personas presentes la reunión entera que sólo son necesarios para un punto en concreto: esta guerra la llevo luchando desde que trabajaba en España hace años. Por aquel entonces, mi empresa se dedicaba a la consultoría medioambiental, y yo era el programador de las webs que desarrollábamos. Pues bien, llegué a tragarme reuniones de 5 horas donde las 4 primeras se centraban en normativas y legislaciones, temas que ni me iban ni me venían, y en la última hora pasábamos a discutir los aspectos de la web. Hay que intentar optimizar el tiempo que la gente pasa en reuniones, y no debería estar mal visto para nada el hecho de que una persona empiece en la reunión y la abandone a los 10-20 minutos de empezar, cosa que, por algún extraño motivo, parece realmente complicado de implementar.&lt;/li&gt;
  &lt;li&gt;Timing: las reuniones deben convocarse con un tiempo razonable, para permitir prepararla a los asistentes, y si la reunión pasa a ser innecesaria por algún motivo debe cancelarse tan pronto lo sepamos. La cancelación tardía de reuniones (no es infrecuente recibir cancelaciones una hora o incluso cinco minutos antes de la reunión) puede resultar muy contraproducente para todos los invitados, que quizás hayan planeado su mañana o tarde en torno a ese evento.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comunicación-asíncrona&quot;&gt;Comunicación asíncrona&lt;/h2&gt;

&lt;p&gt;A diferencia de la comunicación síncrona, en la asíncrona enviamos un mensaje sin esperar respuesta inmediata. Esta forma de comunicación es quizás menos fluida, pero sin embargo no tiene un impacto tan directo en la productividad, ya que queda en cada persona como manejar estos canales. Las dos herramientas principales dentro de esta categoría son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mensajería instantánea&lt;/li&gt;
  &lt;li&gt;Email&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mensajería-instantánea&quot;&gt;Mensajería instantánea&lt;/h3&gt;

&lt;p&gt;No hay empresa que no tenga un sistema de este tipo, llámese Lync, Hipchat o Slack, aunque parece que este último está monopolizando esta categoría últimamente.&lt;/p&gt;

&lt;p&gt;No tengo gran cosa que aportar en esta categoría, quizás resaltar la necesidad de crear canales específicos dentro de un proyecto determinado, de forma que los desarrolladores no discutan temas técnicos en el canal principal (a la vista de Product Managers y gente de negocio), por ejemplo.&lt;/p&gt;

&lt;p&gt;Personalmente, no utilizo la mensajería instantánea muy a menudo, ya que donde realmente es útil es en proyectos donde el equipo está distribuido, lo cual nunca ha sido mi caso.&lt;/p&gt;

&lt;p&gt;Un último consejo: todas las empresas tienen acceso al registro de las conversaciones que dejéis en este tipo de sistemas, así que cuidado con las cosas que digáis :D.&lt;/p&gt;

&lt;h3 id=&quot;email&quot;&gt;Email&lt;/h3&gt;

&lt;p&gt;Existen varias consideraciones a tener en cuenta sobre el uso del correo electrónico. La verdad es que este tema daría para un libro, pero intentaré condensar los puntos más importantes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No asumas que la gente va a leer tu correo: en efecto, la gente está muy ocupada, recibe muchos correos, y muchas veces no tiene tiempo que dedicarle a ese mensaje que tú crees es de importancia capital. El mayor riesgo en este punto es que un correo se quede marcado como leído en la bandeja de entrada sin que ese hecho haya ocurrido realmente. Para mitigar el riesgo de que tu correo sea ignorado, es crucial intentar ser conciso, el efecto “correo marcado como leído sin leer” es más probable cuanto más largo sea el correo. Otra forma de mitigar esto es marcar en negrita una pregunta o aspecto concreto que sea de importancia capital y/o necesite una respuesta en algún momento.&lt;/li&gt;
  &lt;li&gt;La gente reenvía los correos: no creo que os pille por sorpresa, pero lo menciono por si acaso, para que no lo olvidéis. Las consecuencias más nefastas que he experimentado en mi carrera a este respecto es cuando alguien reenvía una conversación kilométrica para que el destinatario eche un vistazo al email más reciente de la cadena, y se da la situación de que en algún punto de la discusión se hablan de temas, digamos “delicados”. Es por esto que debemos ser extremadamente cuidadosos con lo que escribimos en nuestros emails, evitando en la medida de lo posible la ironía, el sarcasmo, y menciones a terceros que se salgan de la objetividad y contengan un componente emocional.&lt;/li&gt;
  &lt;li&gt;Si tienes tres preguntas que hacer, envía tres correos: los correos son leídos normalmente a gran velocidad, y si el correo contiene varias preguntas es probable que no todas sean respondidas (si es que alguna es respondida). Por ello debemos centrarnos en un aspecto muy concreto del que necesitemos aclaración en cada correo, y si queremos incrementar la probabilidad de respuesta, podemos marcarlo en negrita. Una vez leí en un artículo que la mejor forma de incrementar las probabilidades de que el destinatario de un correo responda a una petición es finalizando con “Gracias por adelantado”. No estoy en posición de defender la fiabilidad de esto, pero ahí lo dejo :).&lt;/li&gt;
  &lt;li&gt;Relee y relee antes de escribir, a poder ser en voz alta, o mejor, pide a otra persona que lo relea contigo. Esto ayuda mucho a detectar frases poco claras, falta de información, o a corregir el tono incorrecto en algún punto tratado.&lt;/li&gt;
  &lt;li&gt;Si necesitamos adjuntar un documento importante que pueda evolucionar en el tiempo, plantearos la necesidad de poner ese documento en un espacio compartido (Confluence, Google Drive…), de forma que no se generen confusiones con diferentes versiones circulando. Si no queda otra que adjuntarlo, añadid un número de versión, y madurad bien el documento antes de pulsar “Send”, quizás dejando el correo escrito una tarde y revisándolo en la mañana siguiente antes de enviar.&lt;/li&gt;
  &lt;li&gt;El correo electrónico no es un chat, nunca esperes que la gente responda inmediatamente. Evita en la medida de lo posible el envío de correos para preguntar si un correo anterior ha sido leído, y de hacerlo, deja pasar un tiempo prudencial (no menos de una semana / 10 días).&lt;/li&gt;
  &lt;li&gt;Nunca dejes un tema de gran importancia a expensas de recibir respuesta a un correo, utiliza otros canales para esto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con esto termino mi repaso a las diferentes formas de comunicación en proyectos de empresa. Si pensáis que me he dejado alguna, o si creéis necesario puntualizar algún aspecto de los tratados, estaré encantado de seguir discutiendo en los comentarios.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cómo funciona Git (parte 3)</title>
   <link href="http://www.raulavila.com/2017/03/como-funciona-git-3/"/>
   <updated>2017-03-11T00:00:00+00:00</updated>
   <id>http://www.raulavila.com/2017/03/como-funciona-git-3</id>
   <content type="html">&lt;p&gt;Continuamos con nuestra serie sobre el funcionamiento interno de Git. &lt;a href=&quot;/2017/02/como-funciona-git-2/&quot;&gt;En el anterior post&lt;/a&gt; dejamos nuestro repositorio en el siguiente estado:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-head.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Es hora de revisar como funcionan dos de los comandos más utilizados (y más temidos también): &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;merge&quot;&gt;Merge&lt;/h2&gt;

&lt;p&gt;Git merge significa algo así como “fusiona los contenidos de ambas ramas, utilizando la mejor estrategia posible, y añadiendo un nuevo commit en caso necesario”. No pretendo entrar en detalles de &lt;a href=&quot;https://git-scm.com/docs/merge-strategies&quot;&gt;todas las estrategias que se pueden utilizar&lt;/a&gt;, tan sólo cubriré los casos más frecuentes.&lt;/p&gt;

&lt;h4 id=&quot;fast-forward&quot;&gt;Fast-forward&lt;/h4&gt;

&lt;p&gt;Veamos que ocurre si queremos fusionar las dos ramas en el estado que tenemos ahora mismo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git branch
  develop
* master

$ git merge develop
Already up-to-date.

$ git checkout develop
Switched to branch 'develop'

$ git merge master
Updating 284c288..aa90e47
Fast-forward
 goodbye.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 goodbye.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Intentamos fusionar &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, pero Git nos dice que la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; ya está actualizada. Esto es así porque la historia en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; va por delante de la historia en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, siendo el último commit en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; un sucesor del último commit en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;. Es decir, no hay nada que hacer, porque evidentemente Git no va a eliminar nuevos commits de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; para fusionarla con &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Nos vamos a &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; y la fusionamos con &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Vemos que Git ejecuta la tarea utilizando la estrategia “fast-forward”. Esto significa que Git ha detectado que la historia de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; que no está en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; tiene como ancestro el último commit de &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, por lo que solamente necesita mover el puntero de la rama (arrastrando HEAD con él) hasta el último commit de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Tras realizar esta acción el contenido de Git queda así:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-fast-forward.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;recursive&quot;&gt;Recursive&lt;/h4&gt;

&lt;p&gt;Para explicar correctamente la siguiente estrategia de merge volvamos a la versión anterior de nuestro repositorio, es decir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-head.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es interesante recordar lo que tenemos en ambas ramas también:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git branch
  develop
* master

$ tree
.
├── goodbye.txt
├── greetings
│   └── hello2.txt
└── hello.txt

1 directory, 3 files

$ git checkout develop
Switched to branch 'develop'

$ tree
.
├── greetings
│   └── hello2.txt
└── hello.txt

1 directory, 2 files&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Siendo breves, en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; tenemos un commit que añade el fichero &lt;code class=&quot;highlighter-rouge&quot;&gt;goodbye.txt&lt;/code&gt;, commit que no tenemos en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;. Vamos a añadir un nuevo commit en la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ echo &quot;Greeting develop&quot; &amp;gt; goodbye_develop.txt

$ git add .

$ git commit -m &quot;New commit in develop&quot;
[develop ac88e5b] New commit in develop
 1 file changed, 1 insertion(+)
 create mode 100644 goodbye_develop.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tras este commmit se nos queda el siguiente dibujo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-merge-1.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como veis, ambas ramas han “divergido”, partiendo de un ancestro común (el commit &lt;code class=&quot;highlighter-rouge&quot;&gt;284c28&lt;/code&gt;). Vamos a hacer merge de la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; dentro de &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git merge master
Merge made by the 'recursive' strategy.
 goodbye.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 goodbye.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Git ha utilizado la estrategia “recursive”. Esta es la historia que ha quedado en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*   01c72ea 2017-03-11 | Merge branch 'master' into develop (HEAD -&amp;gt; develop) [RaulAvila]
|\
| * aa90e47 2017-02-11 | Third commit (master) [RaulAvila]
* | ac88e5b 2017-03-11 | New commit in develop [RaulAvila]
|/
* 284c288 2017-02-11 | Second commit [RaulAvila]
* d1ee121 2017-01-22 | First commit (tag: first) [RaulAvila]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si os fijáis bien, se ha añadido un nuevo commit del tipo “merge commit”. La gran diferencia entre un commit normal y uno de tipo “merge”, es que en este último existen dos ancestros, cosa que podemos ver fácilmente con el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git cat-file -p 01c72ea
tree 77f9b4b34bc364b29ac12fec827985384d469ddd
parent ac88e5b089928490ff498f63218687ded7b57c87
parent aa90e471ababde242281c833fffea255f69dd28a
author RaulAvila &amp;lt;xxxxxx@gmail.com&amp;gt; 1489226224 +0000
committer RaulAvila &amp;lt;xxxxxx@gmail.com&amp;gt; 1489226224 +0000

Merge branch 'master' into develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Así nos queda nuestro “árbol” de Git, tras esta operación:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-merge-2.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La rama &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; no sabe nada de lo que ha ocurrido en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;. En teoría podríamos continuar añadiendo nuevos commits en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; y hacerla evolucionar de manera independiente. Pero en proyectos reales, lo más normal en estos casos es sincronizar ambas ramas, lo que en este caso es tan sencillo como hacer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git merge develop
Updating aa90e47..01c72ea
Fast-forward
 goodbye_develop.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 goodbye_develop.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Espero que tenga sentido lo que ha ocurrido ahora, Git ha detectado el merge que tuvo lugar en develop, por lo que para fusionar &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; le basta con hacer un fast-forward, moviendo el puntero de la rama al “merge commit”, es decir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-merge-3.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por cierto, tras todo este proceso, nuestro repositorio ha quedado tal que así:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ tree
.
├── goodbye.txt
├── goodbye_develop.txt
├── greetings
│   └── hello2.txt
└── hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;rebase&quot;&gt;Rebase&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot;&gt;Git rebase&lt;/a&gt; es uno de los comandos más potentes de Git, pero también el más peligroso. No es más que una forma diferente de fusionar el contenido de dos ramas, siguiendo una estrategia bastante agresiva: reescribir la historia, sin añadir ningún commit adicional, como sí hacía merge. El mejor articulo para entender las diferencias entre &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; &lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;es este&lt;/a&gt;, no es mi intención cubrir con mucho detalle algo que ya se ha discutido hasta la saciedad, sino mostrar cuál es el proceso interno en el repositorio de Git.&lt;/p&gt;

&lt;p&gt;Veamos pues qué ocurre cuando hacemos &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;, y para ello partiremos de este estado anterior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-merge-1.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git branch
* develop
  master

$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: New commit in develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Leemos dos mensajes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“Rewinding head to replay your work on top of it”: Git busca el ancestro común de ambas ramas (el commit &lt;code class=&quot;highlighter-rouge&quot;&gt;284c28&lt;/code&gt;), y mueve el puntero &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; por la historia de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; hasta el último commit que encuentre allí (que es &lt;code class=&quot;highlighter-rouge&quot;&gt;aa90e4&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;“Appying: New commit in develop”: Git comienza a leer la historia de &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; a partir del ancestro común (recordemos, &lt;code class=&quot;highlighter-rouge&quot;&gt;284c28&lt;/code&gt;), y commit a commit, lee el contenido de cada uno de ellos (los commits pueden contener trees, blobs… &lt;a href=&quot;/2017/01/como-funciona-git-1/&quot;&gt;leed la primera parte de la serie si no sabéis a qué me refiero&lt;/a&gt;), y genera, para cada commit,  &lt;strong&gt;un nuevo commit&lt;/strong&gt; con exactamente el mismo contenido, pero con un ancestro diferente, puesto que los va situando encima del todo en la historia, tras el último commit de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Recordemos que los commits en Git son inmutables, por lo que si cambia el ancestro, aún manteniendo el contenido, hay que generar un nuevo commit. En realidad no sólo cambia el ancestro, también la fecha, que contendrá el día y hora en que ejecutamos el rebase.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como sólo tenemos un commit en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; que no esté en &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, Git generará un nuevo commit con el mismo contenido, pero teniendo como ancestro a &lt;code class=&quot;highlighter-rouge&quot;&gt;aa90e4&lt;/code&gt; (el último commit de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;). Este nuevo commit tendrá un hash diferente, ya que su fecha/hora y ancestro han cambiado, aún compartiendo contenido (en el caso que nos ocupa, el nuevo hash es &lt;code class=&quot;highlighter-rouge&quot;&gt;3e7eed&lt;/code&gt;). Si hubiera más de un commit en &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; se seguiría reescribiendo la historia, de forma que un segundo commit se añadiría encima de &lt;code class=&quot;highlighter-rouge&quot;&gt;3e7eed&lt;/code&gt;, y así sucesivamente.&lt;/p&gt;

&lt;p&gt;Nuestro árbol de Git queda así:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-rebase-1.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No he dejado el commit &lt;code class=&quot;highlighter-rouge&quot;&gt;284c28&lt;/code&gt; por error. Este es el commit que anteriormente pertenecia a &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, pero ha dejado de hacerlo tras el rebase, momento en que ha sido reemplazado por &lt;code class=&quot;highlighter-rouge&quot;&gt;3e7eed&lt;/code&gt;, que tiene el mismo contenido pero distinto ancestro. El hecho de que tengamos un commit sin ninguna rama que lo referencia significa que en algún momento el recolector de basura de Git lo eliminará de su base de datos. Pero si no queremos que eso ocurra siempre podemos crear una rama apuntando a él, recordad que una rama no es más que un puntero a un commit. Es decir, podríamos hacer esto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git checkout 284c28
Note: checking out '284c28'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &amp;lt;new-branch-name&amp;gt;

HEAD is now at 284c288... Second commit

$ git checkout -b backup
Switched to a new branch 'backup'&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y desde ahora siempre tendremos una referencia a nuestra rama &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; antes del &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;. De hecho conozco a gente que antes de hacer un rebase se crea una rama backup de esta forma desde la propia &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, de forma que si el rebase fracasa estrepitosamente siempre se mantiene la referencia del punto de partida:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/pictures/git-internals/git-rebase-2.jpg&quot; alt=&quot;Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En este punto supongo que sabríais decirme lo que ocurriría si nos vamos a master y hacemos &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge develop&lt;/code&gt;, ¿verdad?:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git merge develop
Updating aa90e47..3e7eed9
Fast-forward
 goodbye_develop.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 goodbye_develop.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En efecto, mediante un sencillo fast-forward, el puntero de &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; se mueve al mismo commit que completa la rama &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resolución-de-conflictos&quot;&gt;Resolución de conflictos&lt;/h2&gt;

&lt;p&gt;En la práctica, hacer &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt; no es tan bonito ni sencillo como acabo de representar, y normalmente tendremos que resolver &lt;a href=&quot;https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/&quot;&gt;los temidos conflictos&lt;/a&gt;. No voy a entrar en detalles sobre este tema, no es el objetivo de estos posts, tan solo añadir un par de puntualizaciones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Si el conflicto ocurre durante un merge donde se está aplicando la estrategia “recursive”, lo que ocurre al resolver los conflictos es que los cambios que generemos al resolverlos se añadirán al contenido (“blob”) del merge commit.&lt;/li&gt;
  &lt;li&gt;Si el conflicto ocurre durante un rebase, Git se quejará mientras aplica uno de los commits según va reescribiendo la historia, y parará de reescribir hasta que lo arreglemos. Una vez solucionado, y tras continuar con el rebase (&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt;) los cambios se añadirán al contenido del commit que se estaba reescribiendo, por lo que en este caso se dará la situación de que un commit “reescrito” no tiene el mismo contenido que el original.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Repito, esta explicación es muy “a grosso”, y entrar en detalles requeriría un artículo en condiciones.&lt;/p&gt;

&lt;p&gt;Finalizo aquí este post de la serie. Mi intención inicial era cubrir la forma en que Git trabaja con repositorios remotos, pero creo que desembocaría en un artículo demasiado largo y poco cohesionado. Así que lo haré en el siguiente, y ahora sí, &lt;a href=&quot;/2017/04/como-funciona-git-4/&quot;&gt;último post de la serie&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Serie completa:&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/01/como-funciona-git-1/&quot;&gt;Parte 1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/02/como-funciona-git-2/&quot;&gt;Parte 2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/03/como-funciona-git-3/&quot;&gt;Parte 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/2017/04/como-funciona-git-4/&quot;&gt;Parte 4&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 

</feed>
